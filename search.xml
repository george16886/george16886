<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>焦糖幫你記ChatBot || Line Bot 實作</title>
    <url>/line-bot-memo/</url>
    <content><![CDATA[<div class="note danger flat"><p>目前本備忘錄僅供個人使用。<br>若喜歡這個功能的朋友可以在下面留言，我再寫一篇教學文，感恩。</p>
</div>

<p>因為有時在聊天的時候，被委託了一些事情，但時常聊完就忘了（被揍😼）或總是要把訊息往上拉很久才找得到（心累🤦）；或是常常臨時想到某件事，但下一秒又忘了（金魚腦🐟）；又或有時候需要暫時的媒介，在不同的裝置間傳遞訊息（cache📲）。因此這個簡單備忘錄📝就誕生了。很陽春的功能，但只要正在使用 Line 聊天，隨手和<strong>焦糖幫你記Bot</strong>說句話，牠就會幫你化解這些尷尬的情境。就是這樣，喵～</p>
<hr>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>結合 <strong>LINE Bot 聊天機器人</strong>和 <strong>Google Sheets 試算表</strong>，利用 <strong>Google Apps Script</strong> 部屬為網路應用程式串接，將 LINE Bot 收到的訊息記錄到 Google Spreadsheet 中，實現簡單的備忘錄功能。</p>
<hr>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>跟焦糖說話，牠就會幫忙記到備忘清單唷；焦糖回應：[message] saved！</li>
<li>想要更新某件記事 -&gt; 說的話包含原記事；焦糖回應：[message] updated！</li>
<li>想要將某件記事標記為完成 -&gt; 再說一遍；焦糖回應：[message] checked！<ul>
<li>簡單舉個例子：<ul>
<li>跟焦糖說 <code>買芒果</code> -&gt; 焦糖回應：買芒果 saved！</li>
<li>突然想到還要買香蕉 -&gt; 直接跟焦糖說 <code>買芒果、香蕉</code> -&gt; 焦糖回應：買芒果、香蕉 updated！</li>
<li>補充一下什麼時候要買 -&gt; 跟焦糖說 <code>禮拜天買芒果、香蕉</code> -&gt; 焦糖回應：禮拜天買芒果、香蕉 updated！</li>
<li>禮拜天買完了 -&gt; 再說一遍 <code>禮拜天買芒果、香蕉</code> -&gt; 焦糖回應：禮拜天買芒果、香蕉 checked！</li>
</ul>
</li>
</ul>
</li>
<li>可以拉群組也可以單獨跟牠說話唷！</li>
<li>新增貼圖格式回應貼圖訊息。</li>
<li>新增圖片格式回應非文字訊息。</li>
<li>若訊息內容提到”焦糖”兩字，召喚焦糖。</li>
</ul>
<hr>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>無視大小寫、空格。</p>
<ul>
<li><code>todo</code> 列出待辦事項；若無未完成項目，焦糖回應：All done！</li>
<li><code>report</code> 列出備忘清單；若清單為空，焦糖回應：All clear！</li>
<li><code>check</code> 將所有項目標記為已完成；焦糖回應：All checked！</li>
<li><code>reset</code> 將所有項目標記為未完成；焦糖回應：All unchecked！</li>
<li><code>clear</code> 清空已完成項目；焦糖回應：Checked items deleted！</li>
<li><code>ls</code> 查詢 User ID 以及各項目時間戳記；若清單為空，只回傳 User ID。</li>
</ul>
<hr>
<h2 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h2><div class="justified-gallery"><p><img src="https://i.imgur.com/RrRzG3z.jpg" alt=""><br><img src="https://i.imgur.com/M3Z4zLh.jpg" alt=""><br><img src="https://i.imgur.com/kddVpVG.jpg" alt=""><br><img src="https://i.imgur.com/LABS4o5.jpg" alt=""><br><img src="https://i.imgur.com/CI8DIj7.jpg" alt=""><br><img src="https://i.imgur.com/s5gF1yO.jpg" alt=""><br><img src="https://i.imgur.com/V2yGXyl.jpg" alt=""><br><img src="https://i.imgur.com/hEunwDx.jpg" alt=""></p>
          </div>
<p><img src="https://i.imgur.com/CNwcJz2.jpg" alt=""></p>
<hr>
<h2 id="Rich-menus"><a href="#Rich-menus" class="headerlink" title="Rich menus"></a>Rich menus</h2><ul>
<li>在群組中無法使用。</li>
<li>在電腦版無法使用。</li>
</ul>
<p><img src="https://i.imgur.com/kfOK6JB.jpg" alt=""></p>
<!-- ---

## My memo
<center><div>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' style='height: 300px; width: 100%;' src='https://docs.google.com/spreadsheets/d/e/2PACX-1vRJWl_ooazAd7KHEvTZ_TIj4CuqDMaYgDuSU6MCwrXuNVUrd5N-e9Ya8nh3B6I4qcdGGdBAtSmh6bxr/pubhtml?gid=1770949940&amp;single=true&amp;widget=true&amp;headers=false'></iframe>");
  </script>
<div></center> -->

<hr>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ol>
<li><input checked="" disabled="" type="checkbox"> 使用指令 <code>todo</code> 列出表單上還沒完成的事。</li>
<li><input checked="" disabled="" type="checkbox"> 使用指令 <code>check</code> 將所有事標記為已完成。</li>
<li><input checked="" disabled="" type="checkbox"> 使用指令 <code>clear</code> 清空已完成項目。</li>
<li><input checked="" disabled="" type="checkbox"> 使用指令 <code>report</code> 列出表單上所有的事。</li>
<li><input checked="" disabled="" type="checkbox"> 依不同 User ID 寫到不同的 sheet 以及做 report。</li>
<li><input checked="" disabled="" type="checkbox"> 指令無視大小寫、空格。</li>
<li><input checked="" disabled="" type="checkbox"> 新增貼圖格式以及圖片格式回功能。</li>
<li><input checked="" disabled="" type="checkbox"> 新增召喚焦糖功能。</li>
<li><input checked="" disabled="" type="checkbox"> 新增更新記事功能。</li>
</ol>
<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/技術隨筆/"><strong>Notes 技術隨筆</strong></a></li>
<li><a href="https://george16886.github.io/line-bot-memo"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>技術隨筆</category>
        <category>Line Bot</category>
      </categories>
      <tags>
        <tag>Chatbot</tag>
        <tag>Quick Memo</tag>
        <tag>Line Bot</tag>
        <tag>Google Sheets</tag>
        <tag>Google Apps Script</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC with MinGW || VS Code</title>
    <url>/coding-with-visual-studio-code-win10-x64/</url>
    <content><![CDATA[<p>Coding with Visual Studio Code @<strong>Windows 10 x64</strong>: </p>
<ol>
<li>Install <a href="https://code.visualstudio.com/download">Visual Studio Code</a>.</li>
<li>Install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++ extension for VS Code</a>.<ul>
<li>Search for ‘C++’ in the Extensions view (Ctrl+Shift+X) of VS Code </li>
</ul>
</li>
<li>Install <a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download">Mingw-w64</a>.<ul>
<li>Architecture -&gt; <strong>x86_64</strong></li>
</ul>
</li>
<li>Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable.<ul>
<li>本機右鍵 -&gt; 內容 -&gt; 進階 -&gt; 環境變數</li>
<li>選 Path -&gt; 編輯 -&gt; 新增（若安裝 Mingw-w64 時沒有更新路徑直接複製下面一行即可）</li>
<li><em>C:\Program Files\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin</em></li>
</ul>
</li>
<li>In VS Code, press <strong>F5</strong> to run.<ul>
<li>C++ (GDB/LLDB)</li>
<li>g++.exe - 建置及偵錯使用中的檔案</li>
</ul>
</li>
</ol>
<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/Leetcode"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>Windows 10 x64</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/技術隨筆/"><strong>Notes 技術隨筆</strong></a></li>
<li><a href="https://george16886.github.io/coding-with-visual-studio-code-win10-x64/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>]]></content>
      <categories>
        <category>Notes</category>
        <category>技術隨筆</category>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>GCC</tag>
        <tag>MinGW</tag>
      </tags>
  </entry>
  <entry>
    <title>Broken Heart || 人生好難</title>
    <url>/broken-heart/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Invalid password, try again. 密碼錯誤，請重新輸入。" data-whm="Oops, these decrypted content cannot be verified, but you can still have a look."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Ask me or not." /><label>Ask me or not.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="e288e938382dc38e421e6e6b68c4b141babd7480425e0a7189f0130672f4346a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Notes</category>
        <category>人生隨筆</category>
      </categories>
      <tags>
        <tag>Love</tag>
      </tags>
  </entry>
  <entry>
    <title>信用卡資訊分享 || 2020 下半年</title>
    <url>/credit-card-second-half-of-2020/</url>
    <content><![CDATA[<p>搭配政府推出的振興三倍券政策，辦了渣打現金回饋御璽卡，就順便加辦幾張 2020 下半年好用的卡。<br>整理一下這幾張卡使用的時機＆通路，以及永豐幣倍卡和渣打現金回饋御璽卡新戶首刷禮的達成條件。</p>
<hr>
<h2 id="我的信用卡使用計畫"><a href="#我的信用卡使用計畫" class="headerlink" title="我的信用卡使用計畫"></a>我的信用卡使用計畫</h2><ul>
<li><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul>
<li>7-11、全家、頂好 =&gt; <a href="#台新街口">街口 + 台新街口 (8%)</a></li>
<li>其他行動支付 =&gt; <a href="#永豐幣倍">各種Pay + 永豐幣倍 (6%~8%)</a></li>
<li>餐廳＆單月超過 $5,000 =&gt; <a href="#國泰KOKO">國泰KOKO (5%)</a></li>
<li>實體消費 =&gt; 玉山Pi (2%)</li>
</ul>
</li>
<li><h3 id="網購"><a href="#網購" class="headerlink" title="網購"></a>網購</h3><ul>
<li>禮拜六 @蝦皮購物/momo/PChome =&gt; <a href="#台新黑狗">台新@GoGo (6%)</a></li>
<li>單月超過 $5,000 =&gt; <a href="#國泰KOKO">國泰KOKO (5%)</a></li>
<li>其他 =&gt; 玉山Ubear (3.8%)</li>
</ul>
</li>
<li><h3 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h3><ul>
<li>台鐵、高鐵 =&gt; <a href="#台新飛狗">台新FlyGo (6%)</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="各信用卡指定通路"><a href="#各信用卡指定通路" class="headerlink" title="各信用卡指定通路"></a>各信用卡指定通路</h2><h3 id="台新街口"><a href="#台新街口" class="headerlink" title="台新街口"></a>台新街口</h3><ul>
<li>街口 + 台新街口 -&gt; 8% (MAX NT$300/月)<ul>
<li>生活：7-ELEVEN、頂好超市、Jasons、全家便利商店</li>
<li>餐飲：頂呱呱、星巴克、CoCo、天仁茗茶、清心福全</li>
<li>搭車：55688台灣大車隊、大都會衛星</li>
<li>百貨：環球購物中心、Citylink、微風、三創生活、誠品生活、台北101、高雄夢時代購物中心、統一時代高雄店</li>
</ul>
</li>
</ul>
<h3 id="永豐幣倍"><a href="#永豐幣倍" class="headerlink" title="永豐幣倍"></a>永豐幣倍</h3><ul>
<li>各種Pay + 永豐幣倍 -&gt; 6%~8% (MAX NT$600/月)<ul>
<li>各種Pay：LINE Pay、Google Pay、Apple Pay、Samsung Pay、Garmin Pay、Fitbit Pay、街口支付</li>
</ul>
</li>
</ul>
<h3 id="台新黑狗"><a href="#台新黑狗" class="headerlink" title="台新黑狗"></a>台新黑狗</h3><ul>
<li>7 大數位通路最高 -&gt; 6% (MAX NT$500/季)<ul>
<li>4 大行動支付(天天)：街口/LINE Pay/Pi錢包/卡得利錢包</li>
<li>3 大熱門網購(週六)：蝦皮購物/momo/PChome(其他日最高3%)</li>
</ul>
</li>
</ul>
<h3 id="台新飛狗"><a href="#台新飛狗" class="headerlink" title="台新飛狗"></a>台新飛狗</h3><ul>
<li>11 大航旅最高 -&gt; 6% (MAX NT$500/季)<ul>
<li>2 大交通：高鐵/台鐵 </li>
<li>4 大飯店：晶華/雲朗/老爺/國賓</li>
<li>5 大航空：華航/長榮/國泰/日航/星宇</li>
</ul>
</li>
</ul>
<h3 id="國泰KOKO"><a href="#國泰KOKO" class="headerlink" title="國泰KOKO"></a>國泰KOKO</h3><ul>
<li>當期帳單新增一般消費 NT$5,000，需<a href="https://www.cathaybk.com.tw/cathaybk/personal/Credit-Card/Discount/Event/Online-Shopping/201711/Kokocomboicash/">登錄</a> -&gt; 5% (MAX NT$300/月)<ul>
<li>指定網購：APPLE iTunes、APPLE之App Store、Google Play、淘寶網、TreeMall(泰贈點紅利網)、Yahoo!奇摩購物中心/超級商城/拍賣、PChome線上購物/商店街、露天拍賣、博客來網路書店、udn買東西、momo購物網、PayEasy、17Life、GOMAJI、91app、生活市集(含原3C市集)、好吃市集、瘋狂賣客、Pinkoi、ASOS、FunNow、7-ELEVEN線上購物中心(原ibon mart)、Uniqlo(優衣庫)、GU服飾、Lativ(米格國際)、GAP、ZALORA、Charles &amp; Keith、貓咪曬月亮(MOONCAT)、Zoey’s。</li>
<li>指定超商：全台四大超商實體門市(7-11、全家、萊爾富、OK)，不含代收費用。</li>
<li>指定交通：台鐵、台灣高鐵、Uber、台灣大車隊、WeMo Scooter、GoShare、客運(國光、統聯、和欣、葛瑪蘭、阿羅哈)。</li>
<li>指定餐廳：全台餐廳(請詳注意事項6)、外送平台(foodpanda、Uber Eats)、連鎖速食(麥當勞、肯德基KFC、漢堡王、頂呱呱、必勝客、達美樂)、EZTABLE。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="新戶首刷禮條件"><a href="#新戶首刷禮條件" class="headerlink" title="新戶首刷禮條件"></a>新戶首刷禮條件</h2><ul>
<li><p>永豐幣倍卡：<br>新戶申辦永豐幣倍卡，核卡後60天內有本行台外幣帳戶間換匯任一筆及一般消費任刷一筆，享刷卡金600元回饋。</p>
</li>
<li><p>渣打現金回饋御璽卡：<br>申請電子信用卡月結單，成功登入渣打行動銀行/網路銀行至少一次，核卡後30天內消費達NT$3,000。</p>
</li>
</ul>
<hr>
<h2 id="爽啦有抽就中"><a href="#爽啦有抽就中" class="headerlink" title="爽啦有抽就中"></a>爽啦有抽就中</h2><p>🎉🎉🎉中獎率 100%🎉🎉🎉</p>
<p><img src="https://i.imgur.com/b3PR48Jl.jpg" alt=""></p>
<p>#客庄旅遊券<br>#藝fun券<br>#動滋券<br>#農遊券 忘了抽😢</p>
<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/生活隨筆/"><strong>Notes 生活隨筆</strong></a></li>
<li><a href="https://george16886.github.io/credit-card-second-half-of-2020/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>]]></content>
      <categories>
        <category>Notes</category>
        <category>生活隨筆</category>
      </categories>
      <tags>
        <tag>Credit Card</tag>
      </tags>
  </entry>
  <entry>
    <title>嘉信開戶紀錄 || Charles Schwab</title>
    <url>/charles-schwab-open-account/</url>
    <content><![CDATA[<p>這篇記錄一些美國 Charles Schwab 嘉信證券開戶的流程和時程，以及遇到的一些問題，希望對大家有幫助🙂</p>
<hr>
<h2 id="開戶選擇-WHY"><a href="#開戶選擇-WHY" class="headerlink" title="開戶選擇 WHY?"></a>開戶選擇 WHY?</h2><p>當初在第一證券（First Trade）和嘉信證券（Charles Schwab）之間猶豫了很久，爬了不少文章，網路上有很多不錯的券商比較文，這裡推薦兩篇：</p>
<ul>
<li><a href="https://fenshares.com/us-stock-brokers-comparison/?unapproved=699&moderation-hash=23eb8de8596caf00aac4b8db2f4afd53">美股投資者必看-超詳細海外券商的比較(2020年5月最新資訊)</a></li>
<li><a href="https://cashflowrich.blogspot.com/2020/02/US-Online-Brokerage-Comparisons.html">海外券商總整理，美股投資常用推薦券商比較(US Online Brokerage Comparisons)</a></li>
</ul>
<p>後來我兩家都辦了哈哈哈😬<br><img src="https://i.imgur.com/chyUlqnl.png" alt=""></p>
<p>但最後真的要電匯的時候還是只能選一個啦😔<br>我本人選擇了嘉信證券，主要就是被那張免提款手續費的 Visa debit card 燒到啦😅<br>不過嘉信真的是不錯，畢竟貴為老券商，相對比較可靠；申請下來也覺得客服很棒，回應頗為迅速。<br>使用後一些個人認為的小缺點，僅供參考：</p>
<ul>
<li>App 看盤介面不夠完善。</li>
<li>對中文使用者較不友善。</li>
<li>沒有國際匯款費用補貼。</li>
</ul>
<hr>
<h2 id="開戶流程-HOW"><a href="#開戶流程-HOW" class="headerlink" title="開戶流程 HOW?"></a>開戶流程 HOW?</h2><p>我主要就是跟著網路上的步驟填寫資料，這裡也推薦兩篇：</p>
<ul>
<li><a href="https://readingoutpost.com/charles-schwab-open-account">美國券商嘉信理財開戶【圖文步驟詳解】2020版</a></li>
<li><a href="https://hugoinvestmentlife.blogspot.com/2020/02/20203-charles-schwab.html">2020.5月更新 美國券商嘉信【開戶流程圖文紀錄】(Charles Schwab)</a></li>
</ul>
<p>特別註明一下在 Select the optional features you’d like to add. 這個步驟裡 Account Features 我是四個選項都沒有勾選的。</p>
<ul>
<li>第一項的 <a href="http://content.schwab.com/web/retail/public/schwab_trading_services/index.html">Schwab Trading Service™️</a> 我查了一下應該只是差別在會不會一併申請 <a href="https://www.schwab.com/public/schwab/active_trader/trading_tools/trading_software">StreetSmart Edge</a>，一套比較專業的交易軟體。</li>
<li>我沒有開融資（Margin Trading）/ 選擇權（Options Trading）/ 期貨（Futures Trading）交易。</li>
</ul>
<p>最後我有多申請這個境外貨幣基金，據說會有比較高的利息。</p>
<ul>
<li><a href="https://hugoinvestmentlife.blogspot.com/2020/05/schwab-us-dollar-liquid-assets-fund.html">嘉信美元境外貨幣基金 (Schwab U.S. Dollar Liquid Assets Fund)</a></li>
</ul>
<hr>
<h2 id="開戶時程-WHEN"><a href="#開戶時程-WHEN" class="headerlink" title="開戶時程 WHEN?"></a>開戶時程 WHEN?</h2><p>— 2020 —</p>
<blockquote>
<p>4/28 前往註冊 <a href="https://international.schwab.com/open-account-intro">Open an account</a>。</p>
</blockquote>
<blockquote>
<p>4/28 收到 email 通知 “Schwab Web Site ID Created”。</p>
</blockquote>
<blockquote>
<p>4/29 提交金融卡申請表。<br>  Service -&gt; Message Center -&gt; Upload Document -&gt; Forms or Account Documents<br>  附件並留言：<br>  I would like to apply the Visa Debit Card.</p>
</blockquote>
<blockquote>
<p>5/1 收到 email 通知 “Get started with your new Schwab account”。<br>  We have received your application and are in the process of reviewing it.<br>  我們收到您的申請了並且正在審核程序中。</p>
</blockquote>
<blockquote>
<p>5/2 收到 email 通知 “Open your Schwab account” 要求補件。<br>  a) Your full spread passport copy (both top and bottom pages) with signature page.<br>  護照必須有上下兩頁，包含主頁和簽名頁。<br>  b) A recently dated fixed line utility bill in your name and home address, the electric bill you uploaded is not under your name.<br>  電費帳單姓名必須吻合。</p>
</blockquote>
<blockquote>
<p>5/2 回覆上述問題，上傳其他證明文件。<br>  Service -&gt; Message Center -&gt; Upload Document -&gt; Forms or Account Documents<br>  a) 附上包含上下頁的護照影本（拍照可）。<br>  b) 因為我外宿，沒有電費帳單在我自己的名下，因此我附上我的身分證、駕照和國籍駕照。<br>  附件並留言：<br>  This document includes my passport with signature, Taiwan ID card, international driver license.<br>  The utility bill of my address is under my family’s name, not mine. So I attached my id card and driving permit as an alternative.</p>
</blockquote>
<blockquote>
<p>5/4 提交境外貨幣基金申請表。<br>  Service -&gt; Message Center -&gt; Upload Document -&gt; Forms or Account Documents<br>  附件並留言：<br>  I’ve uploaded the signed Authorization to Purchase Offshore Investment Shares file in the attachment.</p>
</blockquote>
<blockquote>
<p>5/5 收到 email 通知 “New Account (HUNG)”。<br>  We are finalizing your account application. We noticed that you signed all of the documents, including your passport, with George Hung. It is recommended you <strong>add an alias name to this account</strong>. Form attached for your convenience.<br>  簽名必須與護照上姓名吻合。</p>
</blockquote>
<blockquote>
<p>5/5 回覆上述問題，上傳一份新增別名的文件。<br>  Service -&gt; Message Center -&gt; Upload Document -&gt; Forms or Account Documents<br>  上傳附件：”Add an Alias to Your Account.pdf”。</p>
</blockquote>
<blockquote>
<p>5/9 收到 email 通知 “New Account (HUNG)”。<br>  In the final review, we have come to know that you signed the documents using digital signatures. Please note that we do not accept digital signature, and therefore need you to re-submit with <strong>wet signatures</strong>。<br>  不接受電子簽名，必須親筆簽名。</p>
</blockquote>
<blockquote>
<p>5/9 回覆上述問題，將文件簽名後拍照上傳。<br>  Service -&gt; Message Center -&gt; Upload Document -&gt; Forms or Account Documents<br>  上傳附件：”AKA10.17.pdf”, “APOIS9.pdf” and “SmryofAgrmts.pdf”。</p>
</blockquote>
<blockquote>
<p>5/12 收到 email 通知 “Important: Please review your account information”。<br>  Your Charles Schwab account is open, so you’re off to a great start. Now for a really important step: Please ensure your account information is correct by reviewing your Account Verification Letter.<br>  確認文件，沒問題就完成了，有問題請撥 +1-415-667-8400 (outside the U.S.) 或 800-435-4000 (within the U.S.) 聯絡 Charles Schwab。</p>
</blockquote>
<blockquote>
<p>5/13 收到 email 通知 “You’ve opened your account. Now it’s time to fund it”。<br>  開戶完成！</p>
</blockquote>
<blockquote>
<p>5/19 <strong>收到金融卡！ Visa Debit Card recevied!!</strong><br>  用 FedEx 掛號信寄來的，沒想到還沒匯款卡就先來了！建議在開戶完成的 20 個工作天內盡快把 25000 美金匯入戶頭（如果是使用國泰世華網路銀行進行外幣轉帳，有相關問題可以參考我這篇：<a href="https://george16886.github.io/cathaybk-atm-card-bug/">國際電匯疑難雜症 || 國泰世華網銀</a>）。</p>
</blockquote>
<hr>
<h2 id="後續確認-Q-amp-A"><a href="#後續確認-Q-amp-A" class="headerlink" title="後續確認 Q &amp; A"></a>後續確認 Q &amp; A</h2><ol>
<li><p>由於我看網路上的教學都有接到照會電話，很擔心自己的開戶程序沒有走完整，所以再透過 Message Center 詢問。<br>Service -&gt; Message Center -&gt; Upload Document -&gt; Account Inquiry</p>
<blockquote>
<p>Q：<br>I am writing to confirm that if my account is activated and I can make a wire transfer to fund it?<br>I am not sure because I haven’t got a call verification till now but I did get a mail asking me to fund the account.<br>Please provide me some instructions about what is the next correct step for me.</p>
</blockquote>
<blockquote>
<p>A：<br>Your account’s verification is complete and you are now able to funds into your account.  </p>
</blockquote>
</li>
<li><p>電匯之前問了一下有沒有國際匯款費用補貼，<strong>沒有</strong>😢<br>Service -&gt; Message Center -&gt; Upload Document -&gt; Moving Money</p>
<blockquote>
<p>Q：<br>This is my new open account and I would like to fund my account through wire transfer from Taiwan Cathay United Bank (Swift Code: UWCBTWTP).<br>Will Schwab cover the transfer cost for me?</p>
</blockquote>
<blockquote>
<p>A：<br>Unfortunately we do not offer reimbursement on wire fees charged by your bank.</p>
</blockquote>
</li>
</ol>
<hr>
<p>以上就是我美國 Charles Schwab 嘉信證券開戶時遇到的一些問題，歡迎大家補充分享，謝謝收看～</p>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/理財隨筆/"><strong>Notes 理財隨筆</strong></a></li>
<li><a href="https://george16886.github.io/charles-schwab-open-account"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>理財隨筆</category>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Investment</tag>
        <tag>Charles Schwab</tag>
        <tag>U.S. Stock</tag>
      </tags>
  </entry>
  <entry>
    <title>國際電匯疑難雜症 || 國泰世華網銀</title>
    <url>/cathaybk-atm-card-bug/</url>
    <content><![CDATA[<p>被讀卡機驗證的問題折騰了一個早上😤，在這邊紀錄一下這次使用國泰世華網路銀行進行外幣匯款時遇到的狀況和解決辦法。</p>
<hr>
<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近因為想玩玩美股，辦了美國 Charles Schwab 嘉信證券（開戶流程可以參考我這篇：<a href="https://george16886.github.io/charles-schwab-open-account/">嘉信開戶紀錄 || Charles Schwab</a>），開戶需要 25000 美金。又查了一下以國泰世華的全額到行，總共只要 800 元的郵電費（原本只要 600，5/1 才漲到 800😭）。但計算一下，國泰的手續費相較之下還是最低的，再加上透過網路銀行或行動銀行換匯有 3 分美元的優惠（怎麼寫得好像在業配😓），就二話不說去了國泰辦理開戶以及綁定外幣轉帳約定帳戶（只能臨櫃辦理）。接著就是慢慢換一些美元，湊齊 25000，進入網銀電匯的程序。</p>
<hr>
<h2 id="開始電匯"><a href="#開始電匯" class="headerlink" title="開始電匯"></a>開始電匯</h2><p>登入網路銀行，進入 <strong>外幣存匯 -&gt; 匯出匯款 -&gt; 外匯匯出匯款</strong>。記得要在銀行營業時間內（09:00 ~ 15:30）進行交易。</p>
<p><img src="https://i.imgur.com/5L5SgU0.jpg" alt="Imgur"></p>
<hr>
<h2 id="資料填寫"><a href="#資料填寫" class="headerlink" title="資料填寫"></a>資料填寫</h2><p>選擇受益人，入帳方式選 <strong>1 全額入帳</strong>。</p>
<p><img src="https://i.imgur.com/5XGxzU2.jpg" alt="Imgur"></p>
<p>匯款分類選 <strong>其他 -&gt; 2-本國資金流出 -&gt; 262 投資國外股權證券</strong>。</p>
<p><img src="https://i.imgur.com/2nU2tg9.jpg" alt="Imgur"></p>
<hr>
<h2 id="受款銀行地區代碼空白！"><a href="#受款銀行地區代碼空白！" class="headerlink" title="受款銀行地區代碼空白！"></a>受款銀行地區代碼空白！</h2><p>看到這個我一個驚慌，以為出大事了，是不是在臨櫃填寫資料填錯了，還是行員設定的時候出錯了，打了電話過去確認，銀行表示這樣是正確的，差點沒嚇死我😱。</p>
<p><img src="https://i.imgur.com/9WfHakg.jpg" alt="Imgur"></p>
<hr>
<h2 id="元件下載失敗！"><a href="#元件下載失敗！" class="headerlink" title="元件下載失敗！"></a>元件下載失敗！</h2><p>因為超過台幣 50 萬，需要經過晶片金融卡認證。<br>之前有在網路上看到要使用時代的眼淚 IE (Internet Explorer) 才能順利過關，但我還是一直出現元件下載失敗的錯誤訊息。</p>
<p><img src="https://i.imgur.com/X2ZE4DS.jpg" alt="Imgur"></p>
<p>奇怪的是國泰世華 WebATM 是 OK 的。</p>
<p><img src="https://i.imgur.com/ZpTUVkm.jpg" alt="Imgur"></p>
<p>只好再上網查查，有人說要將 Java 退版到第六版，也有人說要使用最新版，我兩個都嘗試過依然不行。<br>接著試著把 IE 網際網路選項裡面一些安全性等級關於 ActiveX 控制項的設定做了調整，還是行不通。</p>
<p>搞得灰頭土臉，以為中午又要跑一趟銀行了。赫然在 PTT 上看到有人推文：</p>
<blockquote>
<p>推 nicedaniel: 工程師改善前，目前只能在win32位元環境才能下載元件<br>→ nicedaniel: 要用網銀外匯的條件具備：32位元環境、更新Java</p>
</blockquote>
<p>原來重點是 <strong>win32 位元環境</strong> !!</p>
<p>因為電腦是 64 位元的，所以直接從開始功能表開啟的 IE 會是 64 位元的。想要使用 32 位元的 IE 只要<strong>從 C:\Program Files (x86)\Internet Explorer 去開啟 iexplore.exe 就可以了</strong>（原本還在想是不是要用 VirtualBox 灌一個 32 位元的作業系統來解決這件事😅）。</p>
<hr>
<h2 id="Java-版本"><a href="#Java-版本" class="headerlink" title="Java 版本"></a>Java 版本</h2><p>2020/07/23 更新</p>
<div class="note warning flat"><p>這裡補充一下，有網友表示使用 Java 版本 8.261 會失敗，降版至 <strong>Java 版本 7.80</strong> 才成功。</p>
</div>
<blockquote>
<p>Louis Chen:<br>But after use x86 IE and install the new Java 8.261 version.<br>The Cathay bank web page is still stuck after Java active.<br>After I downgrade to Java 7.80, and it works.</p>
</blockquote>
<hr>
<h2 id="電匯進度"><a href="#電匯進度" class="headerlink" title="電匯進度"></a>電匯進度</h2><p>12:20 完成電匯<br>12:24 收到國泰世華網路銀行外匯匯出匯款通知<br>23:24 嘉信帳戶入帳</p>
<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/理財隨筆/"><strong>Notes 理財隨筆</strong></a></li>
<li><a href="https://george16886.github.io/cathaybk-atm-card-bug/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>理財隨筆</category>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Cathay Bank</tag>
        <tag>Investment</tag>
        <tag>International Wire Transfer</tag>
      </tags>
  </entry>
  <entry>
    <title>30-Day LeetCoding Challenge 2020 April Week 5</title>
    <url>/30-Day-LeetCoding-Challenge-2020-April-Week-5/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>本週題目</strong> </p>
<ol>
<li><a href="#Binary-Tree-Maximum-Path-Sum">Binary Tree Maximum Path Sum </a></li>
<li><a href="#Check-If-a-String-Is-a-Valid-Sequence-from-Root-to-Leaves-Path-in-a-Binary-Tree">Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree </a></li>
</ol>
</div>

</br>    

<hr>
<h1 id="Binary-Tree-Maximum-Path-Sum"><a href="#Binary-Tree-Maximum-Path-Sum" class="headerlink" title="Binary Tree Maximum Path Sum"></a>Binary Tree Maximum Path Sum</h1><blockquote>
<p>Given a non-empty binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>
<p>Example 1:<br>Input: [1,2,3]</p>
<pre><code>  1
 / \
2   3</code></pre><p>Output: 6</p>
<p>Example 2:<br>Input: [-10,9,20,null,null,15,7]</p>
<pre><code> -10
 / \
9  20
  /  \
 15   7</code></pre><p>Output: 42</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><div class="note success flat"><p>通常 binary tree 的題型都適用遞迴法：</p>
</div>
<ul>
<li>左子樹或右子樹若小於 0，會造成總和變小，因此當子樹小於 0 時，則設為 0。</li>
<li>遞迴時的回傳值只能是左子樹或右子樹的較大值 + root。</li>
<li>總和為左子樹 + root + 右子樹，在遞迴過程中不斷更新。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = root-&gt;val;</span><br><span class="line">        PathSum(root, sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">PathSum</span><span class="params">(TreeNode *node, <span class="keyword">int</span> &amp;sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="built_in">max</span>(PathSum(node-&gt;left, sum), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> right = <span class="built_in">max</span>(PathSum(node-&gt;right, sum), <span class="number">0</span>);</span><br><span class="line">        sum = <span class="built_in">max</span>(sum, left + node-&gt;val + right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + node-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Check-If-a-String-Is-a-Valid-Sequence-from-Root-to-Leaves-Path-in-a-Binary-Tree"><a href="#Check-If-a-String-Is-a-Valid-Sequence-from-Root-to-Leaves-Path-in-a-Binary-Tree" class="headerlink" title="Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree"></a>Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree</h1><blockquote>
<p>Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. </p>
<p>We get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.</p>
<p>Example 1:<br>Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]<br>Output: true<br>Explanation:<br>The path 0 -&gt; 1 -&gt; 0 -&gt; 1 is a valid sequence (green color in the figure).<br>Other valid sequences are:<br>0 -&gt; 1 -&gt; 1 -&gt; 0<br>0 -&gt; 0 -&gt; 0</p>
<p>Example 2:<br>Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]<br>Output: false<br>Explanation: The path 0 -&gt; 0 -&gt; 1 does not exist, therefore it is not even a sequence.</p>
<p>Example 3:<br>Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]<br>Output: false<br>Explanation: The path 0 -&gt; 1 -&gt; 1 is a sequence, but it is not a valid sequence.</p>
<p>Constraints:<br>    1 &lt;= arr.length &lt;= 5000<br>    0 &lt;= arr[i] &lt;= 9<br>    Each node’s value is between [0 - 9].</p>
<p>Hint #1<br>Depth-first search (DFS) with the parameters: current node in the binary tree and current position in the array of integers.</p>
<p>Hint #2<br>When reaching at final position check if it is a leaf node.</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><div class="note success flat"><p>通常 binary tree 的題型都適用遞迴法：</p>
</div>
<ul>
<li>多傳入一個變數 i 做為 sequence 的 index。回傳左子樹或右子樹是否為 Valid Sequence。</li>
<li>判斷是否為 Valid Sequence 的條件主要有兩個：<ul>
<li>能從頭到尾 =&gt; <code>i == arr.size() - 1</code>。</li>
<li>確認最後是 leaf，不存在左子樹以及右子樹 =&gt; <code>!root-&gt;left &amp;&amp; !root-&gt;right</code>。</li>
</ul>
</li>
<li>在遞迴過程中我們要檢查不會是 Valid Sequence 的情形：<ul>
<li>節點不存在 =&gt; <code>!root</code>。</li>
<li>輸入的 sequence 過長 =&gt; <code>i &gt;= arr.size()</code>。</li>
<li>值不符 =&gt; <code>root-&gt;val != arr[i])</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSequence</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isValidSequence(root, arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSequence</span><span class="params">(TreeNode *root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root || (i &gt;= arr.<span class="built_in">size</span>()) || (root-&gt;val != arr[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((i == arr.<span class="built_in">size</span>() - <span class="number">1</span>) &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isValidSequence(root-&gt;left, arr, i + <span class="number">1</span>) || isValidSequence(root-&gt;right, arr, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/30-Day-LeetCoding-Challenge/tree/master/202004"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>ubuntu 16.04</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/LeetCode/30-Day-LeetCoding-Challenge/"><strong>30-Day LeetCoding Challenge</strong></a></li>
<li><a href="https://george16886.github.io/30-Day-LeetCoding-Challenge-2020-April-Week-5/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>30-Day LeetCoding Challenge</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Solutions</tag>
        <tag>Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>30-Day LeetCoding Challenge 2020 April Week 4</title>
    <url>/30-Day-LeetCoding-Challenge-2020-April-Week-4/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>本週題目</strong> </p>
<ol>
<li><a href="#Subarray-Sum-Equals-K">Subarray Sum Equals K </a></li>
<li><a href="#Bitwise-AND-of-Numbers-Range">Bitwise AND of Numbers Range </a></li>
<li><a href="#LRU-Cache">LRU Cache </a></li>
<li><a href="#Jump-Game">Jump Game </a></li>
<li><a href="#Longest-Common-Subsequence">Longest Common Subsequence </a></li>
<li><a href="#Maximal-Square">Maximal Square </a></li>
<li><a href="#First-Unique-Number">First Unique Number </a></li>
</ol>
</div>

</br>    

<hr>
<h1 id="Subarray-Sum-Equals-K"><a href="#Subarray-Sum-Equals-K" class="headerlink" title="Subarray Sum Equals K"></a>Subarray Sum Equals K</h1><blockquote>
<p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p>
<p>Example 1:<br>Input:nums = [1,1,1], k = 2<br>Output: 2</p>
<p>Note:<br>    The length of the array is in range [1, 20,000].<br>    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].</p>
<p>Hint #1<br>Will Brute force work here? Try to optimize it.</p>
<p>Hint #2<br>Can we optimize it by using some extra space?</p>
<p>Hint #3<br>What about storing sum frequencies in a hash table? Will it be useful?</p>
<p>Hint #4<br>sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1. Can we use this property to optimize it.</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>直接暴力法竟然過了！<ul>
<li>在每個位置上遍歷不同長度的子數列，若子數列總和為 k 則累加。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                ans += (sum == k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>題目提示希望我們使用 <strong>hash table</strong>。</li>
</ul>
<ol>
<li>建一個 hashmap 紀錄各總和出現的次數。</li>
<li>根據 <strong><em>Hint #4</em></strong>，我們利用 <code>sum(i,j)=sum(0,j)-sum(0,i)</code> 的特性 -&gt; <strong>子數列和為 <code>sum - k</code> 若存在，則必存在和為 <code>k</code> 的子數列</strong>。</li>
<li>因此我們累加 <code>sum - k</code> 出現的次數，總和第一次出現 <code>k</code> 的狀況利用初始化<strong>總和為 0 出現一次 =&gt; <code>hmap[0] = 1</code></strong> 解決。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line">        hmap[<span class="number">0</span>]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            ans += hmap[sum - k];</span><br><span class="line">            hmap[sum]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Bitwise-AND-of-Numbers-Range"><a href="#Bitwise-AND-of-Numbers-Range" class="headerlink" title="Bitwise AND of Numbers Range"></a>Bitwise AND of Numbers Range</h1><blockquote>
<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>
<p>Example 1:<br>Input: [5,7]<br>Output: 4</p>
<p>Example 2:<br>Input: [0,1]<br>Output: 0</p>
</blockquote>
<h2 id="Solution-1-Time-Limit-Exceeded"><a href="#Solution-1-Time-Limit-Exceeded" class="headerlink" title="Solution 1 (Time Limit Exceeded)"></a>Solution 1 (Time Limit Exceeded)</h2><ul>
<li>暴力解失敗。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = m, i = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">            ans &amp;= i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2"></a>Solution 2</h2><ol>
<li>觀察一下 <strong>bitwise AND</strong> 在連續整數下的特性，將數轉為二進制來看，因為連續整數每次加 1，會自 <strong>LSB (Least Significant Bit)</strong> 不斷進位，凡是有出現過 0 的位置其 bitwise AND 的結果就一定是 0 -&gt; 同理就是取 <strong>MSB (Most Significant Bit)</strong> 相同的 bit 數，其餘為 0。<br>從 <em>Example 1</em> 觀察：<br>– <em>10’d5 = 2’b<strong>1</strong>01, 10’d6 = 2’b<strong>1</strong>10, 10’d7 = 2’b<strong>1</strong>11 -&gt; 2’b<strong>1</strong>00 = 10’d4</em></li>
<li>於是，我們將邊界的兩個數不斷的右移一個位元（或除以 2）直到兩數相等為止（一樣的MSB），並紀錄右移的位數。</li>
<li>最後，將較小的數再左移回去即為所求。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m != n) &#123;</span><br><span class="line">            m &gt;&gt;= <span class="number">1</span>;  <span class="comment">// m /= 2;</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;  <span class="comment">// n /= 2;</span></span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m &lt;&lt; cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><ol>
<li>我們將 <code>n</code> 和 <code>n-1</code> 做 bitwise AND，一路做到 <code>n &lt;= m</code>。</li>
<li><code>n</code> 和 <code>n-1</code> 做 bitwise AND，其實就是把 <code>n</code> 最右邊位置（LSB）的 1 給丟掉，舉幾個例子：<br>ex. _10’d3 = 2’b01<strong>1</strong>, 10’d2 = 2’b010 -&gt; 2’b010 = 10’d2_，n: 3 -&gt; 2。<br>ex. _10’d2 = 2’b0<strong>1</strong>0, 10’d1 = 2’b001 -&gt; 2’b000 = 10’d0_，n: 2 -&gt; 0。<br>ex. _10’d4 = 2’b<strong>1</strong>00, 10’d3 = 2’b011 -&gt; 2’b000 = 10’d0_，n: 4 -&gt; 0。</li>
<li>注意這做法和 <strong>Solution 1</strong> 暴力解是不同的，一路做 bitwise AND，並不會遍歷整個區間內所有的數，收斂的速度會比暴力解快上不少。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; m)</span><br><span class="line">            n &amp;= n--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h1><blockquote>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a positive capacity.</p>
<p>Follow up:<br>Could you do both operations in O(1) time complexity?</p>
<p>Example:<br>LRUCache cache = new LRUCache( 2 /* capacity */ );</p>
<p>cache.put(1, 1);<br>cache.put(2, 2);<br>cache.get(1);       // returns 1<br>cache.put(3, 3);    // evicts key 2<br>cache.get(2);       // returns -1 (not found)<br>cache.put(4, 4);    // evicts key 1<br>cache.get(1);       // returns -1 (not found)<br>cache.get(3);       // returns 3<br>cache.get(4);       // returns 4</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Follow up: <code>time complexity = O(1)</code>。</li>
</ul>
<ol>
<li>顯然又是一題要用 hashmap 解決的問題，但這邊不一樣的是，我們在 hashmap 中保存 key 以及其對應的 <a href="../c-iterator-notes"><code>list::iterator</code></a>。</li>
<li>接著建一個 list 保存 key-value 指令，並維持最常用的指令放在 list 的最前面（<code>operationList.begin()</code>）。</li>
<li>先考慮 put 的實現：<br>– 若 key 已經存在，先將這個 key 對應到的 key-value 指令從 list 中移除。<br>– 若 cache 已滿，找出在 list 最後面（<code>operationList.rbegin()</code>）的 key，從 hashmap 中移除，並移除 list 最後面的指令（<code>pop_back()</code>）。注意這裡指向 list 最後面的是 rbegin 而不是 end，end 是指向最後一個元素的下一個位置。<br>– 最後把新增的 key-value 指令放在 list 的最前面（<code>push_front(make_pair(key, value))</code>），並加入 hashmap 中。</li>
<li>get 的實現就直覺多了：<br>– 檢查 hashmap，如果 key 不存在 =&gt; 回傳 -1。<br>– 存在的話我們利用 <a href="../c-list-notes">list</a> 的 <a href="../c-list-notes/#splice-函數">splice() 函數</a>，把 key 對應到的 key-value 指令放到 list 的最前面（<code>operationList.begin()</code>），並回傳對應的 value。</li>
</ol>
<ul>
<li>這題學到了兩個新東西：<ul>
<li><a href="../c-list-notes">list</a> 的 <a href="../c-list-notes/#splice-函數">splice() 函數</a></li>
<li><a href="../c-iterator-notes">iterator</a></li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; operationList;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator&gt; hmap;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hmap.count(key)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> operation = hmap.<span class="built_in">find</span>(key)-&gt;second;</span><br><span class="line">        operationList.splice(operationList.<span class="built_in">begin</span>(), operationList, operation);</span><br><span class="line">        <span class="keyword">return</span> operation-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hmap.count(key))</span><br><span class="line">            operationList.erase(hmap.<span class="built_in">find</span>(key)-&gt;second);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (operationList.<span class="built_in">size</span>() == cap) &#123;</span><br><span class="line">            <span class="keyword">int</span> keyLRU = operationList.rbegin()-&gt;first;</span><br><span class="line">            hmap.erase(keyLRU);</span><br><span class="line">            operationList.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        operationList.push_front(<span class="built_in">make_pair</span>(key, value));</span><br><span class="line">        hmap[key] = operationList.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Jump-Game"><a href="#Jump-Game" class="headerlink" title="Jump Game"></a>Jump Game</h1><blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p>Example 1:<br>Input: [2,3,1,1,4]<br>Output: true<br>Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</p>
<p>Example 2:<br>Input: [3,2,1,0,4]<br>Output: false<br>Explanation: You will always arrive at index 3 no matter what. Its maximum<br>             jump length is 0, which makes it impossible to reach the last index.</p>
</blockquote>
<h2 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li><strong>貪婪演算法 <em>Greedy algorithm</em></strong> 的做法：</li>
</ul>
<ol>
<li>因為數值代表你可以跳的<strong>最遠距離</strong>，我們最後一步是可以跳超過的。</li>
<li>使用貪婪演算法，算出每一個可以抵達的位置最遠可以跳的距離：<ul>
<li>用一個變數 maxJump 代表目前跳力，初始為 0。</li>
<li>接著檢查每個位置，如果可以抵達，則將跳力更新。</li>
<li>最後檢查最終跳力是否可以抵達或超過最後一個位置。</li>
</ul>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxJump = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= maxJump)</span><br><span class="line">                maxJump = <span class="built_in">max</span>(nums[i] + i, maxJump);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (maxJump &gt;= n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li><strong>Solution 1</strong> 加入判斷若當前跳力可以抵達或超過最後一個位置，則回傳 true。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxJump = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxJump &gt;= n - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= maxJump)</span><br><span class="line">                maxJump = <span class="built_in">max</span>(nums[i] + i, maxJump);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (maxJump &gt;= n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3-1"><a href="#Solution-3-1" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li>動態規劃 <strong>DP (<em>Dynamic Programming</em>)</strong> 的做法：</li>
</ul>
<ol>
<li>我們紀錄每個位置的剩餘跳力，一路更新。更新的規則為，每個位置的剩餘跳力等於前一個位置的<strong>剩餘跳力</strong>或<strong>新跳力</strong>的較大值減 1。</li>
<li>因為在前一位置有可能原本剩餘的跳力較大或獲得新的跳力補給，所以更新成較大值；而每次往前一步就會消耗掉一格跳力，所以減 1。</li>
<li>一旦在某個位置上的剩餘跳力為負值，表示無法抵達該位置 =&gt; 回傳 false。</li>
<li>若能夠完成遍歷數列，表示在最後一個位置上的剩餘跳力仍然大於等於 0，可以抵達 =&gt; 回傳 true。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], nums[i - <span class="number">1</span>]) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Longest-Common-Subsequence"><a href="#Longest-Common-Subsequence" class="headerlink" title="Longest Common Subsequence"></a>Longest Common Subsequence</h1><blockquote>
<p>Given two strings text1 and text2, return the length of their longest common subsequence.</p>
<p>A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, “ace” is a subsequence of “abcde” while “aec” is not). A common subsequence of two strings is a subsequence that is common to both strings.</p>
<p>If there is no common subsequence, return 0.</p>
<p>Example 1:<br>Input: text1 = “abcde”, text2 = “ace”<br>Output: 3<br>Explanation: The longest common subsequence is “ace” and its length is 3.</p>
<p>Example 2:<br>Input: text1 = “abc”, text2 = “abc”<br>Output: 3<br>Explanation: The longest common subsequence is “abc” and its length is 3.</p>
<p>Example 3:<br>Input: text1 = “abc”, text2 = “def”<br>Output: 0<br>Explanation: There is no such common subsequence, so the result is 0.</p>
<p>Constraints:<br>    1 &lt;= text1.length &lt;= 1000<br>    1 &lt;= text2.length &lt;= 1000<br>    The input strings consist of lowercase English characters only.</p>
<p>Hint #1<br>Try dynamic programming. DP[i][j] represents the longest common subsequence of text1[0 … i] &amp; text2[0 … j].</p>
<p>Hint #2<br>DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j] DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>根據 <strong><em>Hint #1</em></strong> 使用動態規劃 <strong>DP (<em>Dynamic Programming</em>)</strong> 的做法：</li>
</ul>
<ol>
<li>經典的<strong>二維</strong>動態規劃題型，建立一個二維陣列 <code>dp[i][j]</code>，用來紀錄到目前位置兩字串的最長共同長度。</li>
<li>我們必須初始化邊界的條件，因為 <code>dp[i][0]</code> 和 <code>dp[0][j]</code> 都代表其中一個字串為空，因此需要初始為 0。這也造成到位置 <code>(i, j)</code> 時其實是將兩字串的最長共同長度紀錄在 <code>dp[i+1][j+1]</code>。<ul>
<li>若兩個字母相同，則更新為左上方的值加 1，將最長共同長度加 1。</li>
<li>若兩個字母不同，則取上面和左邊的較大值，以維持最長共同長度。</li>
</ul>
</li>
</ol>
<ul>
<li>從 <em>Example 1</em> 的 DP table 觀察：<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">i</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>j</strong></td>
<td align="center"></td>
<td align="center"><strong>a</strong></td>
<td align="center"><strong>b</strong></td>
<td align="center"><strong>c</strong></td>
<td align="center"><strong>d</strong></td>
<td align="center"><strong>e</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>0</strong></td>
<td align="center"><strong>a</strong></td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>c</strong></td>
<td align="center">0</td>
<td align="center"><strong><em>1</em></strong></td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><strong>2</strong></td>
<td align="center"><strong>e</strong></td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center"><strong><em>2</em></strong></td>
<td align="center">2</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"><strong>3</strong></td>
<td align="center"></td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center"><strong><em>3</em></strong></td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(text1.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(text2.<span class="built_in">size</span>() + <span class="number">1</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= text1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= text2.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>])</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[text1.<span class="built_in">size</span>()][text2.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Maximal-Square"><a href="#Maximal-Square" class="headerlink" title="Maximal Square"></a>Maximal Square</h1><blockquote>
<p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>
<p>Example:<br>Input:<br>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0<br>Output: 4</p>
</blockquote>
<h2 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>暴力解，遍歷所有可能為正方形的情形。</li>
</ul>
<ol>
<li>從最大有可能的正方形找起，判斷是否為都是 1 的正方形，方法是透過尋找正方形內是否含有 0 來檢查。</li>
<li>同個面積在不同位置上的正方形檢查完後，找面積比較小的情形。</li>
<li>若找到想要的正方形，回傳面積，都沒找到則回傳 0。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!matrix.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">min</span>(matrix.<span class="built_in">size</span>(), matrix[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= matrix[<span class="number">0</span>].<span class="built_in">size</span>() - n; x++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= matrix.<span class="built_in">size</span>() - n; y++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (squareCheck(matrix, x, y, n))</span><br><span class="line">                        <span class="keyword">return</span> n * n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">squareCheck</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[y + j][x + i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-3"><a href="#Solution-2-3" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>動態規劃 <strong>DP (<em>Dynamic Programming</em>)</strong> 的做法：</li>
</ul>
<ol>
<li><strong>二維</strong>動態規劃題型，建立一個二維陣列 <code>dp[row][col]</code>，表示到目前位置所能形成之最大有效正方形的邊長。</li>
<li>先初始化邊界值，因為邊界形成的正方形邊長不可能超過 1，所以其實就是原本 2D binary matrix 的值。</li>
<li>接著尋找規則，因為必須左上、上面、左邊以及自身都是 1 才能形成有效正方形，所以我們在自身為 1 時，更新為左上、上面、左邊三者的最小值。</li>
<li>需另外用一個變數來紀錄全域性的正方形邊長最大值，最後回傳這個邊長的平方即為所求。</li>
</ol>
<ul>
<li>從 <em>Example</em> 的 DP table 觀察：<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">i</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>j</strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>0</strong></td>
<td align="center"></td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>1</strong></td>
<td align="center"></td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong>1</strong></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><strong>2</strong></td>
<td align="center"></td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center"><strong>1</strong></td>
<td align="center"><strong><em>2</em></strong></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><strong>3</strong></td>
<td align="center"></td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(rows, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(cols))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!row || !col)</span><br><span class="line">                    dp[row][col] = (matrix[row][col] == <span class="string">&#x27;1&#x27;</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (matrix[row][col] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                    dp[row][col] = <span class="built_in">min</span>(dp[row - <span class="number">1</span>][col - <span class="number">1</span>], <span class="built_in">min</span>(dp[row][col - <span class="number">1</span>], dp[row - <span class="number">1</span>][col])) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                maxLength = <span class="built_in">max</span>(maxLength, dp[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxLength * maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="First-Unique-Number"><a href="#First-Unique-Number" class="headerlink" title="First Unique Number"></a>First Unique Number</h1><blockquote>
<p>You have a queue of integers, you need to retrieve the first unique integer in the queue.</p>
<p>Implement the FirstUnique class:</p>
<pre><code>FirstUnique(int[] nums) Initializes the object with the numbers in the queue.
int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.
void add(int value) insert value to the queue.</code></pre><p>Example 1:<br>Input:<br>[“FirstUnique”,”showFirstUnique”,”add”,”showFirstUnique”,”add”,”showFirstUnique”,”add”,”showFirstUnique”]<br>[[[2,3,5]],[],[5],[],[2],[],[3],[]]<br>Output:<br>[null,2,null,2,null,3,null,-1]<br>Explanation:<br>FirstUnique firstUnique = new FirstUnique([2,3,5]);<br>firstUnique.showFirstUnique(); // return 2<br>firstUnique.add(5);            // the queue is now [2,3,5,5]<br>firstUnique.showFirstUnique(); // return 2<br>firstUnique.add(2);            // the queue is now [2,3,5,5,2]<br>firstUnique.showFirstUnique(); // return 3<br>firstUnique.add(3);            // the queue is now [2,3,5,5,2,3]<br>firstUnique.showFirstUnique(); // return -1</p>
<p>Example 2:<br>Input:<br>[“FirstUnique”,”showFirstUnique”,”add”,”add”,”add”,”add”,”add”,”showFirstUnique”]<br>[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]<br>Output:<br>[null,-1,null,null,null,null,null,17]<br>Explanation:<br>FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);<br>firstUnique.showFirstUnique(); // return -1<br>firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]<br>firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]<br>firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]<br>firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]<br>firstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]<br>firstUnique.showFirstUnique(); // return 17</p>
<p>Example 3:<br>Input:<br>[“FirstUnique”,”showFirstUnique”,”add”,”showFirstUnique”]<br>[[[809]],[],[809],[]]<br>Output:<br>[null,809,null,-1]<br>Explanation:<br>FirstUnique firstUnique = new FirstUnique([809]);<br>firstUnique.showFirstUnique(); // return 809<br>firstUnique.add(809);          // the queue is now [809,809]<br>firstUnique.showFirstUnique(); // return -1</p>
<p>Constraints:<br>    1 &lt;= nums.length &lt;= 10^5<br>    1 &lt;= nums[i] &lt;= 10^8<br>    1 &lt;= value &lt;= 10^8<br>    At most 50000 calls will be made to showFirstUnique and add.</p>
<p>Hint #1<br>Use doubly Linked list with hashmap of pointers to linked list nodes. add unique number to the linked list. When add is called check if the added number is unique then it have to be added to the linked list and if it is repeated remove it from the linked list if exists. When showFirstUnique is called retrieve the head of the linked list.</p>
<p>Hint #2<br>Use queue and check that first element of the queue is always unique.</p>
<p>Hint #3<br>Use set or heap to make running time of each function O(logn).</p>
</blockquote>
<h2 id="Solution-1-Time-Limit-Exceeded-1"><a href="#Solution-1-Time-Limit-Exceeded-1" class="headerlink" title="Solution 1 (Time Limit Exceeded)"></a>Solution 1 (Time Limit Exceeded)</h2><ul>
<li>暴力解失敗。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstUnique</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    FirstUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vec = nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            hmap[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">showFirstUnique</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : vec) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hmap[i] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        vec.push_back(value);</span><br><span class="line">        hmap[value]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-4"><a href="#Solution-2-4" class="headerlink" title="Solution 2"></a>Solution 2</h2><div class="note danger flat"><p>後來發現這個解法是錯的，不知道為什麼 OJ 能過＠＠<br>ex: <code>[[[2,3,5]],[3],[2],[]]</code> 出來的結果會是 -1，但應該是 5。</p>
</div>
<ol>
<li>建一個 hashmap，紀錄每個數字出現過的次數。</li>
<li>建一個 list，依序存入還沒出現過的數字。這樣在找 First Unique Number 的時候只要去檢查 list 的開頭即可。</li>
</ol>
<ul>
<li><code>FirstUnique(int[] nums)</code>：初始化 FirstUnique 時，若數字未曾出現過，則從後面推進 list 中。<del>若出現過且在 list 的最前面，將它從 list 中移出。</del> -&gt; 只要有出現過應該都要從 list 中移出。</li>
<li><code>int showFirstUnique()</code>：檢查 list 最前面的數，若只出現過一次，回傳這個數，否則回傳 -1。</li>
<li><code>void add(int value)</code>：和初始化的做法相同。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstUnique</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    FirstUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hmap[i])</span><br><span class="line">                l.push_back(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (l.front() == i)</span><br><span class="line">                l.pop_front();</span><br><span class="line"></span><br><span class="line">            hmap[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">showFirstUnique</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstUnique = l.front();</span><br><span class="line">        <span class="keyword">if</span> (hmap[firstUnique] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> firstUnique;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l.front() == value)</span><br><span class="line">            l.pop_front();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!hmap[value])</span><br><span class="line">            l.push_back(value);</span><br><span class="line"></span><br><span class="line">        hmap[value]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3-2"><a href="#Solution-3-2" class="headerlink" title="Solution 3"></a>Solution 3</h2><div class="note warning flat"><p>未進行 OJ 驗證。</p>
</div>
<ol>
<li>用 set 紀錄數字是否出現過。</li>
<li>用 list 依序存下 Unique Number。</li>
<li>用 hashmap 紀錄 Unique Number 在 list 中的位置。</li>
</ol>
<ul>
<li><code>FirstUnique(int[] nums)</code>：依序呼叫 <code>add(int value)</code> 函數。</li>
<li><code>int showFirstUnique()</code>：檢查 list 是否為空，空則回傳 -1，否則回傳 list 最前面的數。</li>
<li><code>void add(int value)</code>：檢查數字是否已經出現過，出現過的話從 list 和 hashmap 中刪除。若沒出現過，將數字存入 set，從後面推進 list，並將其在 list 中的位置紀錄在 hashmap 中。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstUnique</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; hmap;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    FirstUnique(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">showFirstUnique</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (l.empty()) ? <span class="number">-1</span> : l.front();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>.<span class="built_in">find</span>(value) != <span class="built_in">set</span>.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> map_iter = hmap.<span class="built_in">find</span>(value);</span><br><span class="line">            <span class="keyword">if</span> (map_iter != hmap.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator list_iter = hmap[value];</span><br><span class="line">                l.erase(list_iter);</span><br><span class="line">                hmap.erase(map_iter);  <span class="comment">// map.erase(value);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">set</span>.insert(value);</span><br><span class="line">            l.push_back(value);</span><br><span class="line">            hmap[value] = --l.<span class="built_in">end</span>();  <span class="comment">// prev(l.end());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/30-Day-LeetCoding-Challenge/tree/master/202004"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>ubuntu 16.04</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/LeetCode/30-Day-LeetCoding-Challenge/"><strong>30-Day LeetCoding Challenge</strong></a></li>
<li><a href="https://george16886.github.io/30-Day-LeetCoding-Challenge-2020-April-Week-4/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>30-Day LeetCoding Challenge</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Solutions</tag>
        <tag>Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>30-Day LeetCoding Challenge 2020 April Week 3</title>
    <url>/30-Day-LeetCoding-Challenge-2020-April-Week-3/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>本週題目</strong> </p>
<ol>
<li><a href="#Product-of-Array-Except-Self">Product of Array Except Self </a></li>
<li><a href="#Valid-Parenthesis-String">Valid Parenthesis String </a></li>
<li><a href="#Number-of-Islands">Number of Islands </a></li>
<li><a href="#Minimum-Path-Sum">Minimum Path Sum </a></li>
<li><a href="#Search-in-Rotated-Sorted-Array">Search in Rotated Sorted Array </a></li>
<li><a href="#Construct-Binary-Search-Tree-from-Preorder-Traversal">Construct Binary Search Tree from Preorder Traversal </a></li>
<li><a href="#Leftmost-Column-with-at-Least-a-One">Leftmost Column with at Least a One </a></li>
</ol>
</div>

</br>    

<hr>
<h1 id="Product-of-Array-Except-Self"><a href="#Product-of-Array-Except-Self" class="headerlink" title="Product of Array Except Self"></a>Product of Array Except Self</h1><blockquote>
<p>Given an array nums of n integers where n &gt; 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>Example:<br>Input:  [1,2,3,4]<br>Output: [24,12,8,6]</p>
<p>Constraint: It’s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p>
<p>Note: Please solve it without division and in O(n).</p>
<p>Follow up:<br>Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>第一個想法是遍歷數列得到所有數字之積，再去除以相對應位置上的數。不過題目排除了使用除法的做法… </li>
</ul>
<ol>
<li>只能用乘法，那就把數列以現在的位置，分為<strong>前半段數字的乘積</strong>和<strong>後半段數字的乘積</strong>（都不包含目前的數字），所求即為前半段乘積乘上後半段乘積。</li>
<li>做法是使用兩組新的數列，初始為 1，分別累乘以及存下數列在每個位置的前半段乘積和後半段乘積，再將每個位置上兩數列相乘即為所求。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">productPrefix</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            productPrefix[i + <span class="number">1</span>] = productPrefix[i] * nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">productSuffix</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            productSuffix[i - <span class="number">1</span>] = productSuffix[i] * nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            ans[i] = productPrefix[i] * productSuffix[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>Follow up: <code>space complexity = O(1)</code>。</li>
</ul>
<ol>
<li>其實我們並不需要兩組新的數列，我們可以使用來回遍歷數列的方式，直接更新 output array。</li>
<li>初始 output array 為 1，先從頭往後遍歷，累乘前面出現過的數，得到的 output array 為 <strong>Solution 1</strong> 中前半段數字的乘積。</li>
<li>再從倒數第二個數遍歷回來，累乘 <strong>Solution 1</strong> 中後半段數字的乘積即為所求。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            ans[i + <span class="number">1</span>] = ans[i] * nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> suffix = nums[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ans[i] *= suffix;</span><br><span class="line">            suffix *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Valid-Parenthesis-String"><a href="#Valid-Parenthesis-String" class="headerlink" title="Valid Parenthesis String"></a>Valid Parenthesis String</h1><blockquote>
<p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’, write a function to check whether this string is valid. We define the validity of a string by these rules: </p>
<pre><code>Any left parenthesis &apos;(&apos; must have a corresponding right parenthesis &apos;)&apos;.
Any right parenthesis &apos;)&apos; must have a corresponding left parenthesis &apos;(&apos;.
Left parenthesis &apos;(&apos; must go before the corresponding right parenthesis &apos;)&apos;.
&apos;*&apos; could be treated as a single right parenthesis &apos;)&apos; or a single left parenthesis &apos;(&apos; or an empty string.
An empty string is also valid.</code></pre><p>Example 1:<br>Input: “()”<br>Output: True</p>
<p>Example 2:<br>Input: “(*)”<br>Output: True</p>
<p>Example 3:<br>Input: “(*))”<br>Output: True</p>
<p>Note:<br>    The string size will be in the range [1, 100].</p>
</blockquote>
<h2 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>使用兩個 stack 分別紀錄左括號 <code>(</code> 和星號 <code>*</code> 的位置。</li>
<li>遍歷字串，遇到左括號 <code>(</code> 或星號 <code>*</code> 時，將其 index 存入相對應的 stack。</li>
<li>當遇到右括號 <code>)</code> 時，檢查兩個 stack，若都為空，表示沒有能夠和這個右括號 <code>)</code> 配對的符號 =&gt; invalid。</li>
<li>若左括號 <code>(</code> stack 不為空，取出一個左括號 <code>(</code> 與右括號 <code>)</code> 配對抵銷，要是左括號 <code>(</code> stack 為空，則取星號 <code>*</code> 來配對抵銷。</li>
<li>遍歷字串結束，我們希望左括號 <code>(</code> stack 中已經沒有多餘的左括號 <code>(</code>，若還有，我們嘗試使用星號 <code>*</code> 來抵銷。</li>
<li>檢查左括號 <code>(</code> 和星號 <code>*</code> 的 stack，若左括號 <code>(</code> 的位置在星號 <code>*</code> 的右邊，則兩者無法配對 =&gt; invalid。</li>
<li>否則我們把星號 <code>*</code> 作為右括號 <code>)</code> 和左括號 <code>(</code> 配對抵銷，分別從兩個 stack 中取出。</li>
<li>取到其中一個 stack 為空，檢查左括號 <code>(</code> 的 stack，若不為空，表示還有剩餘無法配對的左括號 <code>(</code> =&gt; invalid。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; left, star;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                left.push(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                star.push(i);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left.empty() &amp;&amp; star.empty())</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!left.empty())</span><br><span class="line">                    left.pop();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!star.empty())</span><br><span class="line">                    star.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!left.empty() &amp;&amp; !star.empty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.top() &gt; star.top())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left.pop();</span><br><span class="line">                star.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>這個解法滿有趣的，讓我苦惱想了很久，試著解釋看看，哪裡有誤請不吝賜教。</li>
</ul>
<ol>
<li>先考慮不含星號 <code>*</code> 的經典題型，我們用一個變數遇到左括號 <code>(</code> 加 1，右括號 <code>)</code> 減 1，有兩種 invalid 的情形：<br>– 中間變數一旦為負數，表示左括號 <code>(</code> 不足夠與右括號 <code>)</code> 配對抵銷 =&gt; invalid。<br>– 若變數最後的值大於 0，表示有多出來的右括號 <code>)</code> =&gt; invalid。<br>– 只有最後變數為 0，才是 valid。</li>
<li>再考慮加入星號 <code>*</code> 的情形，因為星號 <code>*</code> 可以當作左括號 <code>(</code> 、右括號 <code>)</code> 或空字串：<br>– 先把星號 <code>*</code> 當作左括號 <code>(</code> 遍歷一次字串，一樣用一個變數遇到星號 <code>*</code> 或左括號 <code>(</code> 加 1，右括號 <code>)</code> 減 1，得到的變數一旦小於 0，則 invalid，這樣我們便可以把左括號 <code>(</code> 數量不足和右括號 <code>)</code> 數量過多的狀況過濾掉。<br>– 接著一樣的概念，只是我們反向遍歷，把星號 <code>*</code> 當作右括號 <code>)</code>，用一個變數遇到星號 <code>*</code> 或右括號 <code>)</code> 加 1，左括號 <code>(</code> 減 1，得到的變數一旦小於 0，則 invalid，這樣我們便可以把右括號 <code>)</code> 數量不足和左括號 <code>(</code> 數量過多的狀況過濾掉。<br>– 兩個變數都沒有出現過小於 0 的情形 =&gt; valid。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkValidString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> j = s.<span class="built_in">size</span>() - <span class="number">1</span> - i;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;)&#x27;</span> || s[j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                right++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt; <span class="number">0</span> || right &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Number-of-Islands"><a href="#Number-of-Islands" class="headerlink" title="Number of Islands"></a>Number of Islands</h1><blockquote>
<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<p>Example 1:<br>Input:<br>11110<br>11010<br>11000<br>00000<br>Output: 1</p>
<p>Example 2:<br>Input:<br>11000<br>11000<br>00100<br>00011<br>Output: 3</p>
</blockquote>
<h2 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>深度優先搜尋 <strong>DFS (<em>Depth-First Search</em>)</strong> 的做法：</li>
</ul>
<ol>
<li>建一個和 2d grid map 一樣大的 vector 來紀錄每個島嶼是否被訪問過 -&gt; 如果是個島嶼（<code>grid[row][col] == 1</code>）而且沒有被訪問過，將它標記為訪問過，並遞迴去檢查上下左右各個點，注意要排除掉超出邊界的點。</li>
<li>這樣一輪的檢查完會將相連的島嶼標記為訪問過並將島嶼數量增加 1。</li>
<li>繼續尋找下一個還沒訪問過的島嶼，重複這個過程直到遍歷完 2d grid map 中的每個點。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">int</span> cols;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rows = grid.<span class="built_in">size</span>();</span><br><span class="line">        cols = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> island = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">visited</span><span class="params">(rows, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(cols))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[row][col]) &#123;</span><br><span class="line">                    visitIsland(grid, visited, row, col);</span><br><span class="line">                    island++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> island;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; visited, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> withinBound = (row &gt;= <span class="number">0</span>) &amp;&amp; (row &lt; rows) &amp;&amp; (col &gt;= <span class="number">0</span>) &amp;&amp; (col &lt; cols);</span><br><span class="line">        <span class="keyword">if</span> (withinBound)</span><br><span class="line">            <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[row][col]) &#123;</span><br><span class="line">                visited[row][col] = <span class="literal">true</span>;</span><br><span class="line">                visitIsland(grid, visited, row - <span class="number">1</span>, col);</span><br><span class="line">                visitIsland(grid, visited, row + <span class="number">1</span>, col);</span><br><span class="line">                visitIsland(grid, visited, row, col - <span class="number">1</span>);</span><br><span class="line">                visitIsland(grid, visited, row, col + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>和 <strong>Solution 1</strong> 做法相同，但我們不另外建一個和 2d grid map 一樣大的 vector 來紀錄島嶼是否被訪問過，而直接紀錄在原本的 2d grid map -&gt; 將訪問過的島嶼設為 0。 </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> rows;</span><br><span class="line">    <span class="keyword">int</span> cols;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rows = grid.<span class="built_in">size</span>();</span><br><span class="line">        cols = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> island = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    visitIsland(grid, row, col);</span><br><span class="line">                    island++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> island;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> withinBound = (row &gt;= <span class="number">0</span>) &amp;&amp; (row &lt; rows) &amp;&amp; (col &gt;= <span class="number">0</span>) &amp;&amp; (col &lt; cols);</span><br><span class="line">        <span class="keyword">if</span> (withinBound)</span><br><span class="line">            <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                grid[row][col] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                visitIsland(grid, row - <span class="number">1</span>, col);</span><br><span class="line">                visitIsland(grid, row + <span class="number">1</span>, col);</span><br><span class="line">                visitIsland(grid, row, col - <span class="number">1</span>);</span><br><span class="line">                visitIsland(grid, row, col + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Minimum-Path-Sum"><a href="#Minimum-Path-Sum" class="headerlink" title="Minimum Path Sum"></a>Minimum Path Sum</h1><blockquote>
<p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p>Note: You can only move either down or right at any point in time.</p>
<p>Example:<br>Input:<br>[<br>  [1,3,1],<br>  [1,5,1],<br>  [4,2,1]<br>]<br>Output: 7<br>Explanation: Because the path 1→3→1→1→1 minimizes the sum.</p>
</blockquote>
<h2 id="Solution-1-3"><a href="#Solution-1-3" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>動態規劃 <strong>DP (<em>Dynamic Programming</em>)</strong> 的做法：</li>
</ul>
<ol>
<li>我們先建一個 <em>m x n</em> 的 grid（ans）來紀錄每個點的 <em><strong>cost</strong></em> (到這個點最小的數字和)。藉由初始化 ans 為原 grid（<code>ans = grid</code>）賦予原點 <em><strong>cost</strong></em> 值（<code>ans[0][0] = grid[0][0]</code>）。</li>
<li>因為只能往右或往下移動，對每個點來說，它的 <em><strong>cost</strong></em> 就是左邊的 <em><strong>cost</strong></em> 或上面的 <em><strong>cost</strong></em> 加上它自己本身的值。我們從兩者中選擇較小的 <em><strong>cost</strong></em>，一路累加從左上 propagate 到右下。</li>
<li>第一行因為只會從左邊過來，所以它的 <em><strong>cost</strong></em> 就是從左往右一路累加；同理第一列就是一路從上到下累加。</li>
<li>處理完邊界的條件後我們從 <code>ans[1][1]</code> 開始遍歷，遍歷結束 <code>ans[rows - 1][cols - 1]</code> 的 <em><strong>cost</strong></em> 就是我們要的答案。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cols = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans = grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows; row++)</span><br><span class="line">            ans[row][<span class="number">0</span>] = ans[row - <span class="number">1</span>][<span class="number">0</span>] + grid[row][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt; cols; col++)</span><br><span class="line">            ans[<span class="number">0</span>][col] = ans[<span class="number">0</span>][col - <span class="number">1</span>] + grid[<span class="number">0</span>][col];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                ans[row][col] = <span class="built_in">min</span>(ans[row - <span class="number">1</span>][col], ans[row][col - <span class="number">1</span>]) + grid[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans[rows - <span class="number">1</span>][cols - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-3"><a href="#Solution-2-3" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li><strong>Solution 1</strong> 另一種寫法，將對第一行和第一列的處理寫入遍歷的迴圈中。<ul>
<li>從 <code>ans[0][1]</code> 開始遍歷，不包含 <code>ans[0][0]</code> -&gt; <code>ans[0][0]</code> 還是必須另外賦值。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cols = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans = grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; !col)</span><br><span class="line">                    ans[row][<span class="number">0</span>] = ans[row - <span class="number">1</span>][<span class="number">0</span>] + grid[row][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; !row)</span><br><span class="line">                    ans[<span class="number">0</span>][col] = ans[<span class="number">0</span>][col - <span class="number">1</span>] + grid[<span class="number">0</span>][col];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span>)</span><br><span class="line">                    ans[row][col] = <span class="built_in">min</span>(ans[row - <span class="number">1</span>][col], ans[row][col - <span class="number">1</span>]) + grid[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans[rows - <span class="number">1</span>][cols - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li>和前面做法相同，只是不另外建一個 <em>m x n</em> 的 grid（ans）來紀錄每個點的 <em><strong>cost</strong></em>，直接將 <em><strong>cost</strong></em> 更新在原來的 grid 上。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cols = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; !col)</span><br><span class="line">                    grid[row][<span class="number">0</span>] = grid[row - <span class="number">1</span>][<span class="number">0</span>] + grid[row][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; !row)</span><br><span class="line">                    grid[<span class="number">0</span>][col] = grid[<span class="number">0</span>][col - <span class="number">1</span>] + grid[<span class="number">0</span>][col];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; col &gt; <span class="number">0</span>)</span><br><span class="line">                    grid[row][col] = <span class="built_in">min</span>(grid[row - <span class="number">1</span>][col], grid[row][col - <span class="number">1</span>]) + grid[row][col];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> grid[rows - <span class="number">1</span>][cols - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Search-in-Rotated-Sorted-Array"><a href="#Search-in-Rotated-Sorted-Array" class="headerlink" title="Search in Rotated Sorted Array"></a>Search in Rotated Sorted Array</h1><blockquote>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>
<p>Example 1:<br>Input: nums = [4,5,6,7,0,1,2], target = 0<br>Output: 4</p>
<p>Example 2:<br>Input: nums = [4,5,6,7,0,1,2], target = 3<br>Output: -1</p>
</blockquote>
<h2 id="Solution-1-Time-complexity-O-n"><a href="#Solution-1-Time-complexity-O-n" class="headerlink" title="Solution 1 (Time complexity = O(n))"></a>Solution 1 (<code>Time complexity = O(n)</code>)</h2><ul>
<li>這樣竟然也能通過OJ…</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == target) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-4"><a href="#Solution-2-4" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>題目指定 <code>Time complexity = O(log n)</code>，很明顯必須使用二分法：</li>
</ul>
<ol>
<li>從數列中間切一刀，如果剛好切中 target，直接回傳中間的位置。</li>
<li>因為數列被旋轉過，我們檢查左右兩邊哪邊仍維持是一個遞增數列，再檢查 target 有沒有在這個遞增數列當中：<br>– 若有，將另外半邊的數列捨去。<br>– 若沒有，將此遞增數列捨去。</li>
<li>若最後只剩兩個數字，會出現 mid 等於 left 的情形，這時如果 <code>nums[mid]</code> 不是 target，target 就只可能在 right，因此我們必須丟掉左邊的數，下一步就是 mid 等於 left 等於 right，去檢查 <code>nums[mid]</code> 是不是 target。這邊左右判斷條件會有點不對稱:<br>– 如果是先看左半邊數列是不是為遞增要多加一個等號 <code>nums[mid] &gt;= nums[left]</code> -&gt; <strong>Solution 2</strong>。<br>– 如果先檢查右半邊數列則只需要 <code>nums[mid] &lt; nums[right]</code> -&gt; <strong>Solution 3</strong>。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target &amp;&amp; target &gt;= nums[left])</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3-1"><a href="#Solution-3-1" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li><strong>Solution 2</strong> 改為先判斷右半邊數列是不是仍維持為一個遞增數列。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[right])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt; target &amp;&amp; target &gt;= nums[left])</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Construct-Binary-Search-Tree-from-Preorder-Traversal"><a href="#Construct-Binary-Search-Tree-from-Preorder-Traversal" class="headerlink" title="Construct Binary Search Tree from Preorder Traversal"></a>Construct Binary Search Tree from Preorder Traversal</h1><blockquote>
<p>Return the root node of a binary search tree that matches the given preorder traversal.</p>
<p>(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value &lt; node.val, and any descendant of node.right has a value &gt; node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)</p>
<p>Example 1:<br>Input: [8,5,1,7,10,12]<br>Output: [8,5,10,1,7,null,12]</p>
<p>Note:<br>    1 &lt;= preorder.length &lt;= 100<br>    The values of preorder are distinct.</p>
</blockquote>
<h2 id="Solution-1-4"><a href="#Solution-1-4" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>利用 <strong>BST (<em>Binary Search Tree</em>)</strong> 的特性，<strong><code>left.val &lt; root.val &lt; right.val</code></strong>，我們先遍歷數列找到下一個比 <code>root.val</code> 大的節點，即為當前 root 節點的右節點 right。再將左右節點 left 和 right 分別作為 root 節點，遞迴求解：<ul>
<li>左節點 left 建構出 root 節點的左子樹，範圍為 <code>[left, right - 1]</code>。</li>
<li>右節點 right 建構出 root 節點的右子樹，範圍為 <code>[right, end]</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstFromPreorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bstFromPreorder(preorder, <span class="number">0</span>, preorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstFromPreorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; <span class="built_in">end</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = start + <span class="number">1</span>, right = start + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= <span class="built_in">end</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preorder[right] &gt; preorder[start])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(preorder[start]);</span><br><span class="line">        root-&gt;left = bstFromPreorder(preorder, left, right - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = bstFromPreorder(preorder, right, <span class="built_in">end</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-5"><a href="#Solution-2-5" class="headerlink" title="Solution 2"></a>Solution 2</h2><ol>
<li>使用兩個數列 left 和 right 來歸類屬於左子樹還是右子樹。</li>
<li>將原數列的第一個數字作為 root，遍歷數列 -&gt; 比 root 大放進右數列 right，比 root 小放進左數列 left。</li>
<li>兩個子樹再分別建立左右子樹，遞迴求之。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">bstFromPreorder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = preorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preorder[i] &gt; root-&gt;val)</span><br><span class="line">                right.push_back(preorder[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left.push_back(preorder[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root-&gt;left = bstFromPreorder(left);</span><br><span class="line">        root-&gt;right = bstFromPreorder(right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Function-to-print-a-tree-by-level-order-traversal"><a href="#Function-to-print-a-tree-by-level-order-traversal" class="headerlink" title="Function to print a tree by level-order traversal"></a>Function to print a tree by level-order traversal</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;TreeNode*&gt; q;</span><br><span class="line">    q.push(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        TreeNode* current = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; current-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (current-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            q.push(current-&gt;left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (current-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">            q.push(current-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Leftmost-Column-with-at-Least-a-One"><a href="#Leftmost-Column-with-at-Least-a-One" class="headerlink" title="Leftmost Column with at Least a One"></a>Leftmost Column with at Least a One</h1><blockquote>
<p>(This problem is an interactive problem.)</p>
<p>A binary matrix means that all elements are 0 or 1. For each individual row of the matrix, this row is sorted in non-decreasing order.</p>
<p>Given a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn’t exist, return -1.</p>
<p>You can’t access the Binary Matrix directly.  You may only access the matrix using a BinaryMatrix interface:</p>
<pre><code>BinaryMatrix.get(x, y) returns the element of the matrix at index (x, y) (0-indexed).
BinaryMatrix.dimensions() returns a list of 2 elements [n, m], which means the matrix is n * m.</code></pre><p>Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.</p>
<p>For custom testing purposes you’re given the binary matrix mat as input in the following four examples. You will not have access the binary matrix directly.</p>
<p>Example 1:<br>Input: mat = [[0,0],[1,1]]<br>Output: 0</p>
<p>Example 2:<br>Input: mat = [[0,0],[0,1]]<br>Output: 1</p>
<p>Example 3:<br>Input: mat = [[0,0],[0,0]]<br>Output: -1</p>
<p>Example 4:<br>Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]<br>Output: 1</p>
<p>Constraints:<br>    1 &lt;= mat.length, mat[i].length &lt;= 100<br>    mat[i][j] is either 0 or 1.<br>    mat[i] is sorted in a non-decreasing way.</p>
<p>Hint #1<br>(Binary Search) For each row do a binary search to find the leftmost one on that row and update the answer.</p>
<p>Hint #2<br>(Optimal Approach) Imagine there is a pointer p(x, y) starting from top right corner. p can only move left or down. If the value at p is 0, move down. If the value at p is 1, move left. Try to figure out the correctness and time complexity of this algorithm.</p>
</blockquote>
<h2 id="Solution-1-5"><a href="#Solution-1-5" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>偷看了 <strong><em>Hint #2</em></strong>，先假設 ans 在最右邊一列（<code>cols - 1</code>），接著逐行遍歷，每行從 ans 開始檢查，如果是 1，就往左走走到不能走為止（左邊的數字等於 0）。也有可能直接就走到底（<code>ans == 0</code>），表示第一列就有 1 了。</li>
<li>如果遍歷到了最後一行而且 ans 還是在最右邊一列（<code>cols - 1</code>），表示在每行的最右邊一直都沒有找到 1，為一個全 0 的矩陣 =&gt; 回傳 -1。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leftMostColumnWithOne</span><span class="params">(BinaryMatrix&amp; binaryMatrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = binaryMatrix.dimensions()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cols = binaryMatrix.dimensions()[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = cols - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (binaryMatrix.<span class="built_in">get</span>(row, ans)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (ans &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!binaryMatrix.<span class="built_in">get</span>(row, ans - <span class="number">1</span>))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    ans--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((row == rows - <span class="number">1</span>) &amp;&amp; (ans == cols - <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-6"><a href="#Solution-2-6" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>改良 <strong>Solution 1</strong> 中<strong>往左走走到不能走為止</strong>的判斷方式。<ul>
<li><strong>Solution 1</strong> 是自己等於 1 且左邊的數字等於 0 就跳出迴圈。</li>
<li>這邊改成自己等於 1 且左邊的數字也等於 1 就往下走，遇到 0 或走到第一列自然就跳出迴圈。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leftMostColumnWithOne</span><span class="params">(BinaryMatrix&amp; binaryMatrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = binaryMatrix.dimensions()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cols = binaryMatrix.dimensions()[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = cols - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (binaryMatrix.<span class="built_in">get</span>(row, ans))</span><br><span class="line">                <span class="keyword">while</span> (ans &gt; <span class="number">0</span> &amp;&amp; binaryMatrix.<span class="built_in">get</span>(row, ans - <span class="number">1</span>))</span><br><span class="line">                    ans--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((row == rows - <span class="number">1</span>) &amp;&amp; (ans == cols - <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3-2"><a href="#Solution-3-2" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li>和 <strong>Solution 1</strong> 想法差不多，但減少一些判斷：<ul>
<li>我們在逐行遍歷的時候，每行從 ans 開始檢查，如果是 1，就<strong>往左走走到是 0 的位置</strong>，所以最後回傳的時候要再加 1 回來。</li>
<li>如果最後 ans 還停在最右邊，表示都沒有找到 1，為一個全 0 的矩陣 =&gt; 回傳 -1。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">leftMostColumnWithOne</span><span class="params">(BinaryMatrix&amp; binaryMatrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = binaryMatrix.dimensions()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cols = binaryMatrix.dimensions()[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = cols - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (ans &gt;= <span class="number">0</span> &amp;&amp; binaryMatrix.<span class="built_in">get</span>(row, ans))</span><br><span class="line">                ans--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ans == cols - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="BinaryMatrix’s-API-interface"><a href="#BinaryMatrix’s-API-interface" class="headerlink" title="BinaryMatrix’s API interface"></a>BinaryMatrix’s API interface</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryMatrix</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mat;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    BinaryMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; in) &#123;</span><br><span class="line">        mat = in;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> row : mat) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  [ &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i : row)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mat[x][y];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dimensions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cols = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;rows, cols&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/30-Day-LeetCoding-Challenge/tree/master/202004"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>ubuntu 16.04</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/LeetCode/30-Day-LeetCoding-Challenge/"><strong>30-Day LeetCoding Challenge</strong></a></li>
<li><a href="https://george16886.github.io/30-Day-LeetCoding-Challenge-2020-April-Week-3/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>30-Day LeetCoding Challenge</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Solutions</tag>
        <tag>Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>30-Day LeetCoding Challenge 2020 April Week 2</title>
    <url>/30-Day-LeetCoding-Challenge-2020-April-Week-2/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>本週題目</strong> </p>
<ol>
<li><a href="#Middle-of-the-Linked-List">Middle of the Linked List </a></li>
<li><a href="#Backspace-String-Compare">Backspace String Compare </a></li>
<li><a href="#Min-Stack">Min Stack </a></li>
<li><a href="#Diameter-of-Binary-Tree">Diameter of Binary Tree </a></li>
<li><a href="#Last-Stone-Weight">Last Stone Weight </a></li>
<li><a href="#Contiguous-Array">Contiguous Array </a></li>
<li><a href="#Perform-String-Shifts">Perform String Shifts </a></li>
</ol>
</div>

</br>    

<hr>
<h1 id="Middle-of-the-Linked-List"><a href="#Middle-of-the-Linked-List" class="headerlink" title="Middle of the Linked List"></a>Middle of the Linked List</h1><blockquote>
<p>Given a non-empty, singly linked list with head node head, return a middle node of linked list.</p>
<p>If there are two middle nodes, return the second middle node.</p>
<p>Example 1:<br>Input: [1,2,3,4,5]<br>Output: Node 3 from this list (Serialization: [3,4,5])<br>The returned node has value 3.  (The judge’s serialization of this node is [3,4,5]).<br>Note that we returned a ListNode object ans, such that:<br>ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.</p>
<p>Example 2:<br>Input: [1,2,3,4,5,6]<br>Output: Node 4 from this list (Serialization: [4,5,6])<br>Since the list has two middle nodes with values 3 and 4, we return the second one.</p>
<p>Note:<br>    The number of nodes in the given list will be between 1 and 100.</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>先遍歷一次數列，找出 linked list 的長度。</li>
<li>因為是 linked list，在遍歷之前，我們必須先創一個 ListNode 指向原本 linked list 的頭。</li>
<li>從頭遍歷到一半長度的位置回傳。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* tmp = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (head) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot; with count = %d&quot;, count);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Function-to-print-a-linked-list"><a href="#Function-to-print-a-linked-list" class="headerlink" title="Function to print a linked list"></a>Function to print a linked list</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Backspace-String-Compare"><a href="#Backspace-String-Compare" class="headerlink" title="Backspace String Compare"></a>Backspace String Compare</h1><blockquote>
<p>Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.</p>
<p>Example 1:<br>Input: S = “ab#c”, T = “ad#c”<br>Output: true<br>Explanation: Both S and T become “ac”.</p>
<p>Example 2:<br>Input: S = “ab##”, T = “c#d#”<br>Output: true<br>Explanation: Both S and T become “”.</p>
<p>Example 3:<br>Input: S = “a##c”, T = “#a#c”<br>Output: true<br>Explanation: Both S and T become “c”.</p>
<p>Example 4:<br>Input: S = “a#c”, T = “b”<br>Output: false<br>Explanation: S becomes “c” while T becomes “b”.</p>
<p>Note:<br>    1 &lt;= S.length &lt;= 200<br>    1 &lt;= T.length &lt;= 200<br>    S and T only contain lowercase letters and ‘#’ characters.</p>
<p>Follow up:<br>    Can you solve it in O(N) time and O(1) space?</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>創兩組新的字串分別存放處理過後的 S 和 T。</li>
<li>對兩組字串分別遍歷一次，若遇到 <strong>#</strong> 則刪去新字串最後一個字母，若無則將目前字母加入新字串。</li>
<li>需特別處理新字串為空又遇到 <strong>#</strong> 沒有字母可以刪除的情形。</li>
<li>最後判斷兩組新字串是否相同。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : S) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.<span class="built_in">size</span>())</span><br><span class="line">                    s.pop_back();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                s.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : T) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.<span class="built_in">size</span>())</span><br><span class="line">                    t.pop_back();</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                t.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (s == t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li><strong>Solution 1</strong> 簡潔一點的寫法。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">&quot;&quot;</span>, t = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : S) &#123;</span><br><span class="line">            (c == <span class="string">&#x27;#&#x27;</span>) ? (s.<span class="built_in">size</span>() &gt; <span class="number">0</span>) ? s.pop_back() : <span class="keyword">void</span>() : s.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : T) &#123;</span><br><span class="line">            (c == <span class="string">&#x27;#&#x27;</span>) ? (t.<span class="built_in">size</span>() &gt; <span class="number">0</span>) ? t.pop_back() : <span class="keyword">void</span>() : t.push_back(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (s == t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li>Follow up: O(N) time and O(1) space =&gt; 不另外存新的字串。</li>
</ul>
<ol>
<li>因為 <strong>#</strong> 是往前刪去前一個字母，我們用兩個 index 分別<strong>從後往前</strong>遍歷字串。</li>
<li>因為 <strong>#</strong> 有可能<strong>重複</strong>出現，我們需要紀錄目前在兩數列分別出現以及使用了幾個 <strong>#</strong>，以處理需要連續刪除的情形。</li>
<li>兩組字串分別從後往前遍歷，當遇到 <strong>#</strong>，累加，不是 <strong>#</strong>，累減，直到出現的 <strong>#</strong> 都使用掉（這麼做是為了當有 <strong>#</strong> 還沒使用的情形下，表示該字母會被刪除，跳過該字母不進行比較），或是已遍歷到字首。</li>
<li>兩組字串會停在刪去的字母數等於 <strong>#</strong> 出現的字數，比較兩字串最後一個字母，不同則表示兩字串不同。</li>
<li>若兩字串最後一個字母相同，兩字串繼續往前遍歷，直到兩字串都遍歷完。</li>
<li>當其中一個字串遍歷完，另一個字串還沒，表示兩字串不同。</li>
<li>兩字串同時被刪光則兩字串相同。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">backspaceCompare</span><span class="params">(<span class="built_in">string</span> S, <span class="built_in">string</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sIdx = S.<span class="built_in">size</span>() - <span class="number">1</span>, tIdx = T.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sCnt = <span class="number">0</span>, tCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sIdx &gt;= <span class="number">0</span> || tIdx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (sIdx &gt;= <span class="number">0</span> &amp;&amp; (S[sIdx] == <span class="string">&#x27;#&#x27;</span> || sCnt &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[sIdx] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    sCnt++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sCnt--;</span><br><span class="line"></span><br><span class="line">                sIdx--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tIdx &gt;= <span class="number">0</span> &amp;&amp; (T[tIdx] == <span class="string">&#x27;#&#x27;</span> || tCnt &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (T[tIdx] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    tCnt++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tCnt--;</span><br><span class="line"></span><br><span class="line">                tIdx--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sIdx &lt; <span class="number">0</span> || tIdx &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (sIdx == tIdx);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (S[sIdx] == T[tIdx]) &#123;</span><br><span class="line">                sIdx--;</span><br><span class="line">                tIdx--;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (sIdx == tIdx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Min-Stack"><a href="#Min-Stack" class="headerlink" title="Min Stack"></a>Min Stack</h1><blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<pre><code>push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.</code></pre><p>Example:<br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; Returns -3.<br>minStack.pop();<br>minStack.top();      –&gt; Returns 0.<br>minStack.getMin();   –&gt; Returns -2.</p>
<p>Hint #1<br>Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)</p>
</blockquote>
<ol>
<li>這題要幫 stack 加一個找最小值的功能。</li>
<li>push(x) 和 pop() 兩個功能要特別去判斷一下當前的值是不是最小值。</li>
</ol>
<h2 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>先設一個變數 min，初始為整數最大值。</li>
<li>這邊有個小 trick，因為我們在做 pop() 的時候，如果 pop() 到最小值，我們會不知道之前的最小值是多少。</li>
<li>所以我們在 push(x) 的時候，如果 x <strong>小於或等於</strong>最小值，我們把之前的最小值先推進去當作資訊 -&gt; 先 push(min) 再 push(x)。<br>ex. [0, 1, 2] 最小值 min = 0 -&gt; push(-1) -&gt; [0, 1, 2, 0, -1] 最小值 min = -1。</li>
<li>這樣當我們 pop() 到最小值的時候，就可以把最小值設成之前那個，並且多做一次 pop() 把暫存的最小值資訊丟掉。<br>ex. [0, 1, 2, 0, -1] 最小值 min = -1 -&gt; pop() twice -&gt; [0, 1, 2] 最小值 min = 0。</li>
<li>要注意這邊如果在 push(x) 的時候，如果 x <strong>等於</strong>最小值，也要把之前的最小值先推進去。<br>ex. [0, 1, 2, 0] 最小值 min = 0 -&gt; pop() 0 出來後會不知道之前的最小值是多少。<br>所以我們在推 0 進去 [0, 1, 2] 的時候，先多送一個 0 進去 -&gt; [0, 1, 2, 0, 0]。<br>之後把 0 拿出來的時候，因為它也是最小值，所以會多 pop() 一次 -&gt; [0, 1, 2] 而且最小值 min = 0。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MinStack() &#123;</span><br><span class="line">        <span class="built_in">min</span> = INT32_MAX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="built_in">min</span>) &#123;</span><br><span class="line">            s.push(<span class="built_in">min</span>);</span><br><span class="line">            <span class="built_in">min</span> = x;</span><br><span class="line">        &#125;</span><br><span class="line">        s.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> top = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="built_in">min</span>) &#123;</span><br><span class="line">            <span class="built_in">min</span> = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.top();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>用兩個 stack，一個做普通的 push(x) 和 pop()，一個用來紀錄曾經的最小值。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sMin;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MinStack() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sMin.empty() || x &lt;= sMin.top()) sMin.push(x);</span><br><span class="line">        s.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top() == sMin.top()) sMin.pop();</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.top();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sMin.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Diameter-of-Binary-Tree"><a href="#Diameter-of-Binary-Tree" class="headerlink" title="Diameter of Binary Tree"></a>Diameter of Binary Tree</h1><blockquote>
<p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. </p>
<p>Example:<br>Given a binary tree</p>
<pre><code>    1
   / \
  2   3
 / \     
4   5    </code></pre><p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>
<p>Note: The length of path between two nodes is represented by the number of edges between them. </p>
</blockquote>
<h2 id="Solution-1-2"><a href="#Solution-1-2" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>要找出最遠兩個 node 的距離，我們考慮使用遞迴，通常 binary tree 的題型都適用遞迴法。</li>
<li>因為最遠的距離有可能不會經過 root，我們要考慮三種情形的最大值：<br>– 有經過 node 的 diameter = 左邊的 MAX depth + 右邊的 MAX depth。<br>– 左邊 sub-tree 的 diameter -&gt; 適用遞迴。<br>– 右邊 sub-tree 的 diameter -&gt; 適用遞迴。</li>
<li>從 root 開始遞迴的方式相當於從最下層一路累加找出每個 node 的 MAX depth，即 <code>std::max(left, right) + 1</code>。</li>
<li>我們設一個 global 的變數 diameter，在遞迴的過程中一邊更新 <code>diameter = std::max(diameter, left + right)</code>。</li>
<li>遞迴在最後抵達 root 的時候結束，diameter 即是我們要的最遠兩個 node 的距離。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> diameter;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        maxDepth(root);</span><br><span class="line">        <span class="keyword">return</span> diameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = maxDepth(node-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> right = maxDepth(node-&gt;right);</span><br><span class="line">        diameter = <span class="built_in">max</span>(diameter, left + right);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-2"><a href="#Solution-2-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>和 <strong>Solution 1</strong> 做法相同，只是將 global 的變數 diameter 改用指標傳入 maxDepth，在遞迴時同時更新。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> diameter = <span class="number">0</span>;</span><br><span class="line">        maxDepth(root, diameter);</span><br><span class="line">        <span class="keyword">return</span> diameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* node, <span class="keyword">int</span>&amp; diameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = maxDepth(node-&gt;left, diameter);</span><br><span class="line">        <span class="keyword">int</span> right = maxDepth(node-&gt;right, diameter);</span><br><span class="line">        diameter = <span class="built_in">max</span>(diameter, left + right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Last-Stone-Weight"><a href="#Last-Stone-Weight" class="headerlink" title="Last Stone Weight"></a>Last Stone Weight</h1><blockquote>
<p>We have a collection of stones, each stone has a positive integer weight.</p>
<p>Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x &lt;= y.  The result of this smash is:</p>
<pre><code>If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.</code></pre><p>At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)</p>
<p>Example 1:<br>Input: [2,7,4,1,8,1]<br>Output: 1<br>Explanation:<br>We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,<br>we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,<br>we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,<br>we combine 1 and 1 to get 0 so the array converts to [1] then that’s the value of last stone.</p>
<p>Note:<br>    1 &lt;= stones.length &lt;= 30<br>    1 &lt;= stones[i] &lt;= 1000</p>
<p>Hint #1<br>Simulate the process. We can do it with a heap, or by sorting some list of stones every time we take a turn.</p>
</blockquote>
<h2 id="Solution-1-3"><a href="#Solution-1-3" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>排序（使用 <code>#include &lt;algorithm&gt;</code> 中的 <code>std::sort()</code>）找出前兩大的值，紀錄下它們的差值，並將這兩個值從原數列移出。</li>
<li>若差值不為 0，則將差值推入原數列。</li>
<li>重複直到數列只剩下一個值或為空。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (stones.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            sort(stones.<span class="built_in">begin</span>(), stones.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">int</span> diff = stones[stones.<span class="built_in">size</span>() - <span class="number">1</span>] - stones[stones.<span class="built_in">size</span>() - <span class="number">2</span>];</span><br><span class="line">            stones.erase(stones.<span class="built_in">end</span>() - <span class="number">2</span>, stones.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (diff)</span><br><span class="line">                stones.push_back(diff);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (stones.<span class="built_in">size</span>()) ? stones[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-3"><a href="#Solution-2-3" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>和 <strong>Solution 1</strong> 一樣的做法，使用 pop_back() 取代 erase()。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (stones.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            sort(stones.<span class="built_in">begin</span>(), stones.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">max</span> = stones[stones.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">            stones.pop_back();</span><br><span class="line">            <span class="keyword">int</span> diff = <span class="built_in">max</span> - stones[stones.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">            stones.pop_back();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (diff)</span><br><span class="line">                stones.push_back(diff);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (stones.<span class="built_in">size</span>()) ? stones[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3-1"><a href="#Solution-3-1" class="headerlink" title="Solution 3"></a>Solution 3</h2><ol>
<li>將原字串依序丟入 <code>#include &lt;queue&gt;</code> 的 <code>std::priority_queue</code> 中。</li>
<li>利用 priority queue 的特性，不需要在 while 迴圈裡重複做 sorting，只需要將前兩大值的差值推入 priority queue 中。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; priority_q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stone : stones) priority_q.push(stone);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (priority_q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> max1 = priority_q.top();</span><br><span class="line">            priority_q.pop();</span><br><span class="line">            <span class="keyword">int</span> max2 = priority_q.top();</span><br><span class="line">            priority_q.pop();</span><br><span class="line">            <span class="keyword">int</span> v = <span class="built_in">abs</span>(max1 - max2);</span><br><span class="line">            <span class="keyword">if</span> (v) priority_q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (priority_q.<span class="built_in">size</span>()) ? priority_q.top() : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution 4"></a>Solution 4</h2><ul>
<li><strong>Solution 3</strong> 簡潔一點的寫法。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastStoneWeight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; <span class="title">priority_q</span><span class="params">(<span class="built_in">begin</span>(stones), <span class="built_in">end</span>(stones))</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (priority_q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> max1 = priority_q.top();</span><br><span class="line">            priority_q.pop();</span><br><span class="line">            <span class="keyword">int</span> max2 = priority_q.top();</span><br><span class="line">            priority_q.pop();</span><br><span class="line">            <span class="keyword">if</span> (max1 - max2) priority_q.push(max1 - max2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (priority_q.<span class="built_in">size</span>()) ? priority_q.top() : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Contiguous-Array"><a href="#Contiguous-Array" class="headerlink" title="Contiguous Array"></a>Contiguous Array</h1><blockquote>
<p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.</p>
<p>Example 1:<br>Input: [0,1]<br>Output: 2<br>Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</p>
<p>Example 2:<br>Input: [0,1,0]<br>Output: 2<br>Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</p>
<p>Note: The length of the given binary array will not exceed 50,000. </p>
</blockquote>
<h2 id="Solution-1-Time-Limit-Exceeded"><a href="#Solution-1-Time-Limit-Exceeded" class="headerlink" title="Solution 1 (Time Limit Exceeded)"></a>Solution 1 (Time Limit Exceeded)</h2><ul>
<li>想了一個<strong>暴力解</strong>，果然用兩個迴圈是行不通的… 還是紀錄一下解題想法。</li>
</ul>
<ol>
<li>遍歷所有子數列，遇到 0 減 1，遇到 1 加 1，如果總和為 0，表示這個子數列有一樣多的 0 和 1。</li>
<li>找出有相同數目的 0 和 1 且最長的子數列長度。</li>
<li>如果剩下的子數列長度小於前面得到的最長子數列長度，跳出迴圈，前面得到的最長子數列長度即為解。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  <span class="comment">// Time Limit Exceeded</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n - j &lt;= ans) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> sum = (nums[j] * <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j + <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                sum += (nums[i] * <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> len = i - j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> ((sum == <span class="number">0</span>) &amp;&amp; (len &gt; ans))</span><br><span class="line">                    ans = len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-4"><a href="#Solution-2-4" class="headerlink" title="Solution 2"></a>Solution 2</h2><ol>
<li>看來我們只能遍歷一次數列，判斷規則相同，遇到 0 減 1，遇到 1 加 1，如果總和為 0，表示這個子數列有一樣多的 0 和 1。</li>
<li>從頭累加數列，若在兩個不同位置有相同的<strong>總和</strong>，表示兩個位置的<strong>總和差為 0</strong> -&gt; 這兩個位置中間的子數列有相同數目的 0 和 1。</li>
<li>建一個 hashmap，紀錄不同總和出現的位置 -&gt; <code>hashmap &#123;sum, index&#125;</code>，若是總和在 hashmap 中已經出現過，這個有相同數目的 0 和 1 的子數列長度即為當前的 index 減去存在 hashmap 中的 index。</li>
<li>因為我們要找有相同數目的 0 和 1 且<strong>最長</strong>的子數列長度 -&gt; 在 hashmap 中只紀錄不同總和出現的<strong>第一個位置</strong>。</li>
<li>找出有相同數目的 0 和 1 且最長的子數列長度。</li>
<li>注意初始化 hashmap 的時候，需給予 <code>sum = 0</code> 的時候 <code>index = -1</code> 的條件，這是為了總和第一次出現 0 的時候，表示這個子數列是從原數列起始位置 <code>index = 0</code> 開始的，這時我們需要直接去計算目前子數列的長度，而不是去建立 hashmap 的映射。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum += (nums[i] * <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!hmap.count(sum))</span><br><span class="line">                hmap[sum] = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i - hmap[sum] &gt; ans)</span><br><span class="line">                ans = i - hmap[sum];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Perform-String-Shifts"><a href="#Perform-String-Shifts" class="headerlink" title="Perform String Shifts"></a>Perform String Shifts</h1><blockquote>
<p>You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:</p>
<pre><code>direction can be 0 (for left shift) or 1 (for right shift). 
amount is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.</code></pre><p>Return the final string after all operations.</p>
<p>Example 1:<br>Input: s = “abc”, shift = [[0,1],[1,2]]<br>Output: “cab”<br>Explanation:<br>[0,1] means shift to left by 1. “abc” -&gt; “bca”<br>[1,2] means shift to right by 2. “bca” -&gt; “cab”</p>
<p>Example 2:<br>Input: s = “abcdefg”, shift = [[1,1],[1,1],[0,2],[1,3]]<br>Output: “efgabcd”<br>Explanation:<br>[1,1] means shift to right by 1. “abcdefg” -&gt; “gabcdef”<br>[1,1] means shift to right by 1. “gabcdef” -&gt; “fgabcde”<br>[0,2] means shift to left by 2. “fgabcde” -&gt; “abcdefg”<br>[1,3] means shift to right by 3. “abcdefg” -&gt; “efgabcd”</p>
<p>Constraints:<br>    1 &lt;= s.length &lt;= 100<br>    s only contains lower case English letters.<br>    1 &lt;= shift.length &lt;= 100<br>    shift[i].length == 2<br>    0 &lt;= shift[i][0] &lt;= 1<br>    0 &lt;= shift[i][1] &lt;= 100</p>
<p>Hint #1<br>Intuitively performing all shift operations is acceptable due to the constraints.</p>
<p>Hint #2<br>You may notice that left shift cancels the right shift, so count the total left shift times (may be negative if the final result is right shift), and perform it once.</p>
</blockquote>
<h2 id="Solution-1-4"><a href="#Solution-1-4" class="headerlink" title="Solution 1"></a>Solution 1</h2><ul>
<li>這題滿直覺的，右移一格表示把字串最右邊的字母丟到字串最左邊，兩格就做兩次；左移則反之。<ul>
<li>右移一格 -&gt; <code>s = 字尾 + 刪掉字尾剩下的字串</code>。</li>
<li>左移一格 -&gt; <code>s = 刪掉字首剩下的字串 + 字首</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">stringShift</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; shift)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> instruction : shift) &#123;</span><br><span class="line">            <span class="keyword">bool</span> direction = instruction[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> amount = instruction[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; amount; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (direction)</span><br><span class="line">                    s = s[s.<span class="built_in">size</span>() - <span class="number">1</span>] + s.substr(<span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    s = s.substr(<span class="number">1</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>) + s[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-5"><a href="#Solution-2-5" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li>根據 <strong><em>Hint #2</em></strong>，把指令中左移和右移的總和先做抵銷，再執行最後的指令。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">stringShift</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; shift)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">final</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> instruction : shift) &#123;</span><br><span class="line">            <span class="keyword">bool</span> direction = instruction[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> amount = instruction[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">final</span> += (direction) ? amount : -amount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>(<span class="keyword">final</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">final</span> &gt; <span class="number">0</span>)</span><br><span class="line">                s = s[s.<span class="built_in">size</span>() - <span class="number">1</span>] + s.substr(<span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s = s.substr(<span class="number">1</span>, s.<span class="built_in">size</span>() - <span class="number">1</span>) + s[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/30-Day-LeetCoding-Challenge/tree/master/202004"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>ubuntu 16.04</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/LeetCode/30-Day-LeetCoding-Challenge/"><strong>30-Day LeetCoding Challenge</strong></a></li>
<li><a href="https://george16886.github.io/30-Day-LeetCoding-Challenge-2020-April-Week-2/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>30-Day LeetCoding Challenge</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Solutions</tag>
        <tag>Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>30-Day LeetCoding Challenge 2020 April Week 1</title>
    <url>/30-Day-LeetCoding-Challenge-2020-April-Week-1/</url>
    <content><![CDATA[<div class="note info flat"><p><strong>本週題目</strong> </p>
<ol>
<li><a href="#Single-Number">Single Number </a></li>
<li><a href="#Happy-Number">Happy Number </a></li>
<li><a href="#Maximum-Subarray">Maximum Subarray </a></li>
<li><a href="#Move-Zeroes">Move Zeroes </a></li>
<li><a href="#Best-Time-to-Buy-and-Sell-Stock-II">Best Time to Buy and Sell Stock II </a></li>
<li><a href="#Group-Anagrams">Group Anagrams </a></li>
<li><a href="#Counting-Elements">Counting Elements </a></li>
</ol>
</div>

</br>    

<hr>
<h1 id="Single-Number"><a href="#Single-Number" class="headerlink" title="Single Number"></a>Single Number</h1><blockquote>
<p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p>Example 1:<br>Input: [2,2,1]<br>Output: 1</p>
<p>Example 2:<br>Input: [4,1,2,1,2]<br>Output: 4</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>建一個 hashmap，用來紀錄每個數字出現的次數。</li>
<li>我們遍歷一次數列，若該數字不存在 hashmap 中，表示它第一次出現，ans 加上它的值。</li>
<li>如果該數字存在 hashmap 中，表示它曾經出現過，ans 減去它的值。</li>
<li>因為除了答案之外其他每個數字只會出現兩次，ans 一加一減後為 0，最後 ans 即為所求。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hmap.count(nums[i]))</span><br><span class="line">                ans -= nums[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans += nums[i];</span><br><span class="line"></span><br><span class="line">            hmap[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><ol>
<li>使用 <strong>XOR (<em>eXclusive OR</em>)</strong> 的特性：<br>– <strong><code>T ^ T = F</code></strong><br>– <strong><code>T ^ F = 1</code></strong><br>– <strong><code>F ^ T = 1</code></strong><br>– <strong><code>F ^ F = 0</code></strong></li>
<li>數字是使用二進位儲存的，舉 <em>Example 2: Input = [4,1,2,1,2]</em> 為例：<br>– <code>4 ^ 1 = 5</code> (<em>10’d4 = 2’b100, 10’d1 = 2’b001 -&gt; 2’b100 ^ 2’b001 = 2’b101 = 10’d5</em>).<br>– <code>5 ^ 2 = 7</code> (<em>10’d5 = 2’b101, 10’d2 = 2’b010 -&gt; 2’b101 ^ 2’b010 = 2’b111 = 10’d7</em>).<br>– <code>7 ^ 1 = 6</code> (<em>10’d7 = 2’b111, 10’d1 = 2’b001 -&gt; 2’b111 ^ 2’b001 = 2’b110 = 10’d6</em>).<br>– <code>6 ^ 2 = 4</code> (<em>10’d6 = 2’b110, 10’d2 = 2’b010 -&gt; 2’b110 ^ 2’b010 = 2’b100 = 10’d4</em>).</li>
<li>遍歷一次數列，出現兩次的數字 XOR 結果為 0，剩下的就是只出現過一次的數字。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; nums.size(); i++) &#123;</span></span><br><span class="line">        <span class="comment">//     ans ^= nums[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            ans ^= i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Happy-Number"><a href="#Happy-Number" class="headerlink" title="Happy Number"></a>Happy Number</h1><blockquote>
<p>Write an algorithm to determine if a number n is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Return True if n is a happy number, and False if not.</p>
<p>Example:<br>Input: 19<br>Output: true<br>Explanation:<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>每次的 loop 要檢查每個數字每個 digit 的平方和是不是 1，一旦為 1 則為 happy number。</li>
<li>但有可能會進入無窮迴圈，因此用一個 hashmap 紀錄出現過的數字，若遇到曾經出現過的數字則不是 happy number。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hmap[n])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            hmap[n]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n) &#123;</span><br><span class="line">                sum += (n % <span class="number">10</span>) * (n % <span class="number">10</span>);</span><br><span class="line">                n /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a>Maximum Subarray</h1><blockquote>
<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p>Example:<br>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p>
<p>Follow up:<br>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</blockquote>
<h2 id="Solution-1-1"><a href="#Solution-1-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><ol>
<li>設一個 local MAX，local MAX 加上下一個數字如果變大，則更新 local MAX。</li>
<li>local MAX 加上下一個數字如果變小，表示 local MAX 要被下一個數字取代。</li>
<li>設一個 global MAX 隨時更新。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> globalMAX = INT32_MIN;</span><br><span class="line">        <span class="keyword">int</span> localMAX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = localMAX + nums[i];</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; nums[i])</span><br><span class="line">                localMAX = tmp;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                localMAX = nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (localMAX &gt; globalMAX)</span><br><span class="line">                globalMAX = localMAX;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> globalMAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-1"><a href="#Solution-2-1" class="headerlink" title="Solution 2"></a>Solution 2</h2><ul>
<li><strong>Solution 1</strong> 簡潔一點的寫法。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> globalMAX = INT32_MIN;</span><br><span class="line">        <span class="keyword">int</span> localMAX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            localMAX = <span class="built_in">max</span>(localMAX + num, num);</span><br><span class="line">            globalMAX = <span class="built_in">max</span>(localMAX, globalMAX);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> globalMAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><ul>
<li>Follow up: 使用 divide and conquer 的做法。</li>
</ul>
<ol>
<li>將數列分為左半邊右半邊，分別去找左右兩邊的 MAX。</li>
<li>根據中間分割點向左向右延伸找出中間的 MAX。</li>
<li>最後回傳左半邊、中間、右半邊的 MAX。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> divideArray(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divideArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMAX = divideArray(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> rightMAX = divideArray(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">int</span> sideMAX = <span class="built_in">max</span>(leftMAX, rightMAX);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> midLeftMAX = nums[mid];</span><br><span class="line">        <span class="keyword">int</span> midLeftSum = nums[mid];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &gt;= left; i--) &#123;</span><br><span class="line">            midLeftSum += nums[i];</span><br><span class="line">            midLeftMAX = <span class="built_in">max</span>(midLeftMAX, midLeftSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> midMAX = midLeftMAX;</span><br><span class="line">        <span class="keyword">int</span> midSum = midLeftMAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            midSum += nums[i];</span><br><span class="line">            midMAX = <span class="built_in">max</span>(midMAX, midSum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> globalMAX = <span class="built_in">max</span>(midMAX, sideMAX);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> globalMAX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h1><blockquote>
<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>Example:<br>Input: [0,1,0,3,12]<br>Output: [1,3,12,0,0]</p>
<p>Note:<br>    You must do this in-place without making a copy of the array.<br>    Minimize the total number of operations.</p>
<p>Hint #1<br>In-place means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.</p>
<p>Hint #2<br>A two-pointer approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array.</p>
</blockquote>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>先找出第一個 0 的位置，記住它的 index。</li>
<li>遍歷一次數列，若不是 0，則和第一個 0 交換，並更新第一個 0 的位置。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> firstZeroIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = nums[firstZeroIndex];</span><br><span class="line">                nums[firstZeroIndex] = nums[i];</span><br><span class="line">                nums[i] = tmp;</span><br><span class="line">                firstZeroIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h1><blockquote>
<p>Say you have an array prices for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p>Example 1:<br>Input: [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.</p>
<p>Example 2:<br>Input: [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>             engaging multiple transactions at the same time. You must sell before buying again.</p>
<p>Example 3:<br>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p>
<p>Constraints:<br>    1 &lt;= prices.length &lt;= 3 * 10 ^ 4<br>    0 &lt;= prices[i] &lt;= 10 ^ 4</p>
</blockquote>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>可以任意交易，其實就是最大收益，所有差價都納入考慮。</li>
<li>如果差價是正值，表示我們可以晚點賣出，收益增加差價的值。</li>
<li>如果差價是負值，表示我們會早一天賣出，收益不增加也不減少。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> diff = prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (diff &gt; <span class="number">0</span>)</span><br><span class="line">                profit += diff;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h1><blockquote>
<p>Given an array of strings, group anagrams together.</p>
<p>Example:<br>Input: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Output:<br>[<br>  [“ate”,”eat”,”tea”],<br>  [“nat”,”tan”],<br>  [“bat”]<br>]</p>
<p>Note:<br>    All inputs will be in lowercase.<br>    The order of your output does not matter.</p>
</blockquote>
<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>計算每個字串中每個字母的個數，藉此創造分類。</li>
<li>例如 <code>&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;</code> 都有1個 a、1個 e、1個 t，則屬於 <code>1a1e1t</code> 類。</li>
<li>建一個 hashmap，將同類的放在一起。</li>
<li>依分類將 hashmap 中的 <code>vector&lt;string&gt;</code> 吐出。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">groupAnagrams</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; hmap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> str : strs) &#123;</span><br><span class="line">            <span class="built_in">string</span> category;</span><br><span class="line">            <span class="comment">// int count[26] = &#123;&#125;;</span></span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : str) &#123;</span><br><span class="line">                count[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count[i]) &#123;</span><br><span class="line">                    <span class="comment">// category += to_string(count[i]) + string(1, i + &#x27;a&#x27;);</span></span><br><span class="line">                    category += to_string(count[i]) + to_string(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            hmap[category].push_back(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; output;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> h : hmap) &#123;</span><br><span class="line">            output.push_back(h.second);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Counting-Elements"><a href="#Counting-Elements" class="headerlink" title="Counting Elements"></a>Counting Elements</h1><blockquote>
<p>Given an integer array arr, count element x such that x + 1 is also in arr.</p>
<p>If there’re duplicates in arr, count them seperately.</p>
<p>Example 1:<br>Input: arr = [1,2,3]<br>Output: 2<br>Explanation: 1 and 2 are counted cause 2 and 3 are in arr.</p>
<p>Example 2:<br>Input: arr = [1,1,3,3,5,5,7,7]<br>Output: 0<br>Explanation: No numbers are counted, cause there’s no 2, 4, 6, or 8 in arr.</p>
<p>Example 3:<br>Input: arr = [1,3,2,3,5,0]<br>Output: 3<br>Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.</p>
<p>Example 4:<br>Input: arr = [1,1,2,2]<br>Output: 2<br>Explanation: Two 1s are counted cause 2 is in arr.</p>
<p>Constraints:<br>    1 &lt;= arr.length &lt;= 1000<br>    0 &lt;= arr[i] &lt;= 1000</p>
<p>Hint #1<br>Use hashset to store all elements.</p>
<p>Hint #2<br>Loop again to count all valid elements.</p>
</blockquote>
<h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>建一個 hashmap，用來紀錄每個數字 i 出現的次數。</li>
<li>遍歷數列檢查 <code>i + 1</code> 是否存在，若存在，則答案累加上 i 出現的次數。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countElements</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hmap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            hmap[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hmap.count(i + <span class="number">1</span>))</span><br><span class="line">                ans += hmap.count(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</br>    

<hr>
<blockquote>
<ul>
<li><em>Source code</em>: <a href="https://github.com/george16886/30-Day-LeetCoding-Challenge/tree/master/202004"><strong>george16886@GitHub</strong></a><ul>
<li><input checked="" disabled="" type="checkbox"> <em>Programming language</em>: <strong>C++</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Environment</em>: <strong>ubuntu 16.04</strong></li>
<li><input checked="" disabled="" type="checkbox"> <em>Tool</em>: <strong>Visual Studio Code</strong> </li>
</ul>
</li>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/LeetCode/30-Day-LeetCoding-Challenge/"><strong>30-Day LeetCoding Challenge</strong></a></li>
<li><a href="https://george16886.github.io/30-Day-LeetCoding-Challenge-2020-April-Week-1/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>30-Day LeetCoding Challenge</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Solutions</tag>
        <tag>Challenge</tag>
      </tags>
  </entry>
  <entry>
    <title>Tag Plugins || HEXO 外掛</title>
    <url>/hexo-tag-plugins/</url>
    <content><![CDATA[<blockquote>
<p>Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts.<br>標籤外掛是 Hexo 獨有的功能，並不是標準的 Markdown 格式。</p>
</blockquote>
<ul>
<li>Check <a href="https://hexo.io/zh-tw/docs/tag-plugins.html">Official website</a> for details. </li>
<li>部份來自 <a href="https://demo.george16886.me/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安裝文檔(三) 主題配置-1</a> </li>
</ul>
<p>這篇節錄一些我個人認為比較實用的HEXO標籤外掛。</p>
</br>    

<hr>
<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>Inserts a link with target=”_blank” attribute.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure>
<a href="%5Bhttps://george16886.github.io%5D" title="nothing but everything" target="">george16886&#39;s blog</a>

</br>

<hr>
<h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>Inserts an image with specified size.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>
<img src="https://bit.ly/3aVcEJV" class="[class names]" width="320" height="240" title="pika cute" alt="alt text"> 
<img src="/uploads/images/friend_404.gif" class="[class names]" width="320" height="240" title="404 ghost " alt="alt text">

</br>

<hr>
<h1 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h1><p>Inserts a YouTube video.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% youtube video<span class="emphasis">_id %&#125;</span></span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="https://www.youtube.com/embed/xRZAHBs8OQI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

</br>

<hr>
<h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><p>Inserts a Gist snippet.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist<span class="emphasis">_id [filename] %&#125;</span></span><br></pre></td></tr></table></figure>
<script src="//gist.github.com/835cbb4185f8672ea936705038a9fc95.js?file=01_Two_Sum.cpp"></script>

</br>

<hr>
<h1 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h1><p>Perfect for adding quotes to your post, with optional author, source and title information.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source<span class="emphasis">_link_</span>title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Quote-from-a-book"><a href="#Quote-from-a-book" class="headerlink" title="Quote from a book"></a>Quote from a book</h2><blockquote><p>Reading provokes thoughts while writing captures it.<br>閱讀激發思考，寫作捕捉思路。</p>
<footer><strong>Mark Levy</strong><cite>Accidental Genius</cite></footer></blockquote>

<h2 id="Quote-from-Twitter"><a href="#Quote-from-Twitter" class="headerlink" title="Quote from Twitter"></a>Quote from Twitter</h2><blockquote><p>The W.H.O. really blew it. For some reason, funded largely by the United States, yet very China centric. We will be giving that a good look. Fortunately I rejected their advice on keeping our borders open to China early on. Why did they give us such a faulty recommendation?</p>
<footer><strong>@realDonaldTrump</strong><cite><a href="https://twitter.com/realDonaldTrump/status/1247540701291638787">twitter.com/realDonaldTrump/status/1247540701291638787</a></cite></footer></blockquote>

<h2 id="Quote-from-an-article-on-the-web"><a href="#Quote-from-an-article-on-the-web" class="headerlink" title="Quote from an article on the web"></a>Quote from an article on the web</h2><blockquote><p>咦？不是已經有N26了嗎？ 為何又開了一個銀行呢？</p>
<p>Revolut是朋友推薦給我的，起初因為我一直沒辦法使用好友推薦連結，所以放棄申辦，但之後因為還是覺得他太方便了，所以就只好自己從官網申辦Orz</p>
<blockquote>
<p>推薦連結：<a href="https://revolut.com/referral/shangywih!a13221">https://revolut.com/referral/shangywih!a13221</a><br>歡迎在德國的各位從此組推薦連結開始走開戶流程，完成所有開戶並使用revolut的卡完成消費後，會獲得10歐喲！<br>啊啊小額協助此部落格之運作吧哈哈哈，一百個感謝！</p>
</blockquote>
<footer><strong>Charlene Cheng (鬼鬼)</strong><cite><a href="https://medium.com/%E5%BE%B7%E5%9C%8B%E9%AC%BC%E7%9A%84180%E5%A4%A9%E9%A4%8A%E6%88%90%E8%A8%88%E7%95%AB/%E5%BE%B7%E5%9C%8B%E4%BA%A4%E6%8F%9B-revolut-%E5%A4%9A%E5%B9%A3%E9%8A%80%E8%A1%8C%E9%96%8B%E6%88%B6-2019-223155b517f0">|| 德國交換 || Revolut 多幣銀行開戶 -2019</a></cite></footer></blockquote>

</br>

<hr>
<h1 id="Post-Excerpt"><a href="#Post-Excerpt" class="headerlink" title="Post Excerpt"></a>Post Excerpt</h1><p>Use text placed before the <code>&lt;!-- more --&gt;</code> tag as an excerpt for the post. excerpt: value in the front-matter, if specified, will take precedent.</p>
</br>

<hr>
<div class="note danger flat"><p>以下的外掛，只適用於 <a href="https://github.com/george16886127/hexo-theme-butterfly">HEXO butterfly</a> 主題，用在其它主題上不會有效果，甚至可能會報錯。使用前請留意。</p>
</div>

<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>Bootstrap Callout</p>
<h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>[class]   : default | primary | success | info | warning | danger.</li>
<li>[no-icon] : Disable icon in note.</li>
<li>All parameters are optional.</li>
</ul>
</br>

<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><div class="note default flat"><p>default 提示塊標籤</p>
</div>

<div class="note primary flat"><p>primary 提示塊標籤</p>
</div>

<div class="note success flat"><p>success 提示塊標籤</p>
</div>

<div class="note info flat"><p>info 提示塊標籤</p>
</div>

<div class="note warning flat"><p>warning 提示塊標籤</p>
</div>

<div class="note danger flat"><p>danger 提示塊標籤</p>
</div>

</br>

<hr>
<h1 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h1><p>自動根據圖片長度進行排版，書寫也更加方便，與 <code>markdown</code> 格式一樣。可根據需要插入到相應的 <code>md</code>。</p>
</br>

<h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><div class="justified-gallery"><p><img src="https://bit.ly/3aVcEJV" alt="pika cute" title="pikachu"><br><img src="https://bit.ly/2xceXtv" alt="pika ball" title="pika pika"><br><img src="/uploads/images/friend_404.gif" alt="OOOOOPS!!" title="404 ghost animated"><br><img src="/uploads/images/404.jpg" alt="Whoops!" title="404 ghost"></p>
          </div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![<span class="string">pika cute</span>](<span class="link">https://bit.ly/3aVcEJV &quot;pikachu&quot;</span>)</span><br><span class="line">![<span class="string">pika ball</span>][<span class="symbol">logo</span>]</span><br><span class="line">![<span class="string">OOOOOPS!!</span>](<span class="link">/uploads/images/friend_404.gif &quot;404 ghost animated&quot;</span>)</span><br><span class="line">![<span class="string">Whoops!</span>](<span class="link">/uploads/images/404.jpg &quot;404 ghost&quot;</span>)</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">https://bit.ly/2xceXtv &quot;pika pika&quot;</span></span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Album"><a href="#Album" class="headerlink" title="Album"></a>Album</h1><h2 id="Settings-1"><a href="#Settings-1" class="headerlink" title="Settings"></a>Settings</h2><ol start="0">
<li>先在 <code>source</code> 下建立一個 <code>Gallery</code> 的資料夾。</li>
<li>在 <code>Gallery</code> 下建立相簿，並在相簿中建立一個 <code>index.md</code>。</li>
<li>利用 <a href="#Gallery"><strong>Gallery</strong></a> 的方式編輯 <code>index.md</code>。</li>
</ol>
<h2 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>name：圖庫名字</li>
<li>description：圖庫描述</li>
<li>link：連接到對應相冊的地址</li>
<li>img-url：圖庫封面的地址</li>
</ul>
</br>

<h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h2><div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/pages/music.jpg'>
  <figcaption>
  <div class="gallery-group-name">隨手拍拍</div>
  <p>拿來當頁首的照片</p>
  <a href='/album/top_images/'></a>
  </figcaption>
  </figure>
  

  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/travel.gif'>
  <figcaption>
  <div class="gallery-group-name">網頁素材</div>
  <p>開發網站可能會用到的圖片</p>
  <a href='/album/web_dev/'></a>
  </figcaption>
  </figure>
  
</div>

</br>

<hr>
<h1 id="Tag-Hide"><a href="#Tag-Hide" class="headerlink" title="Tag Hide"></a>Tag Hide</h1><p>如果你想把一些文字、內容隱藏起來，並提供按鈕讓用户點擊顯示。可以使用這個標籤外掛。</p>
<h2 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h3><ul>
<li>在文本里面添加按鈕隱藏內容，只限文字。<ul>
<li>content 不能包含 <code>&#39;</code>，可用 <code>&amp;apos;</code> 替代。</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><ul>
<li>獨立的 block 隱藏內容，可以隱藏很多內容，包括圖片，代碼塊等等。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h3><ul>
<li>如果你需要展示的內容太多，可以把它隱藏在收縮框裏，需要時再把它展開。<ul>
<li>display 不能包含 <code>,</code>，可用 <code>&amp;sbquo;</code> 替代。</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>content: 文本內容</li>
<li>display: 按鈕顯示的文字 (可選)</li>
<li>bg: 按鈕的背景顏色 (可選)</li>
<li>color: 按鈕文字的顏色 (可選)</li>
</ul>
</br>

<h2 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h2><h3 id="Inline-1"><a href="#Inline-1" class="headerlink" title="Inline"></a>Inline</h3><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click me
  </button><span class="hide-content">Text</span></span>
<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #00FFCC;color: #FF7242">Click me
  </button><span class="hide-content">only</span></span>

<h3 id="Block-1"><a href="#Block-1" class="headerlink" title="Block"></a>Block</h3><div class="hide-block"><button type="button" class="hide-button button--animated" style="color: #00FFCC">Gallery
    </button><span class="hide-content"><div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/pages/music.jpg'>
  <figcaption>
  <div class="gallery-group-name">隨手拍拍</div>
  <p>拿來當頁首的照片</p>
  <a href='/album/top_images/'></a>
  </figcaption>
  </figure>


  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/travel.gif'>
  <figcaption>
  <div class="gallery-group-name">網頁素材</div>
  <p>開發網站可能會用到的圖片</p>
  <a href='/album/web_dev/'></a>
  </figcaption>
  </figure>

</div></span></div>

<h3 id="Toggle-1"><a href="#Toggle-1" class="headerlink" title="Toggle"></a>Toggle</h3><div class="hide-toggle" style="border: 1px solid #d7f5f3"><div class="hide-button toggle-title" style="background-color: #d7f5f3;color: #ff7242"><i class="fas fa-caret-right fa-fw"></i><span>Gallery</span></div>
    <div class="hide-content"><div class="gallery-group-main">

  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/pages/music.jpg'>
  <figcaption>
  <div class="gallery-group-name">隨手拍拍</div>
  <p>拿來當頁首的照片</p>
  <a href='/album/top_images/'></a>
  </figcaption>
  </figure>


  <figure class="gallery-group">
  <img class="gallery-group-img" src='/uploads/images/travel.gif'>
  <figcaption>
  <div class="gallery-group-name">網頁素材</div>
  <p>開發網站可能會用到的圖片</p>
  <a href='/album/web_dev/'></a>
  </figcaption>
  </figure>

</div></div></div>

</br>

<hr>
<h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h1><p>使用 mermaid 標籤可以繪製 Flowchart（流程圖）、Sequence diagram（時序圖）、Class Diagram（類別圖）、State Diagram（狀態圖）、Gantt（甘特圖）和 Pie Chart（圓形圖），具體可以查看 <a href="https://mermaid-js.github.io/mermaid/#/">mermaid 文檔</a>。</p>
<h2 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h2><h3 id="Pie-Chart"><a href="#Pie-Chart" class="headerlink" title="Pie Chart"></a>Pie Chart</h3><div class="mermaid">pie
    title 2020 Taiwanese Presidential Election 
    "Tsai Ing-wen" : 8170231
    "Han Kuo-yu" : 5522119
    "Soong Chu-yu" : 608590 </div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title 2020 Taiwanese Presidential Election </span></span><br><span class="line"><span class="code">    &quot;Tsai Ing-wen&quot; : 8170231</span></span><br><span class="line"><span class="code">    &quot;Han Kuo-yu&quot; : 5522119</span></span><br><span class="line"><span class="code">    &quot;Soong Chu-yu&quot; : 608590 </span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h1><p>分頁。</p>
<h2 id="Usage-3"><a href="#Usage-3" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Unique name   : Unique name of tabs block tag without comma.<pre><code>Will be used in #id&apos;s as prefix for each tab with their index numbers.
If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.
Only for current url of post/page must be unique!</code></pre></li>
<li>[index]       : Index number of active tab.<pre><code>If not specified, first tab (1) will be selected.
If index is -1, no tab will be selected. It&apos;s will be something like spoiler.
Optional parameter.</code></pre></li>
<li>[Tab caption] : Caption of current tab.<pre><code>If not caption specified, unique name with tab index suffix will be used as caption of tab.
If not caption specified, but specified icon, caption will empty.
Optional parameter.</code></pre></li>
<li>[@icon]       : FontAwesome icon name (full-name, look like ‘fas fa-font’)<pre><code>Can be specified with or without space; e.g. &apos;Tab caption @icon&apos; similar to &apos;Tab caption@icon&apos;.
Optional parameter.</code></pre></li>
</ul>
</br>

<h2 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h2><div class="tabs" id="example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#example-1">First Tab</button></li><li class="tab"><button type="button" data-href="#example-2"><i class="fas fa-icicles" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#example-3"><i class="fas fa-snowflake"></i>Snowflake</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="example-1"><p><strong>Tab caption ONLY</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="example-2"><p><strong>@icon ONLY</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="example-3"><p><strong>Tab caption with @icon</strong></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>

</br>

<hr>
<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><p>按鈕。</p>
<h2 id="Usage-4"><a href="#Usage-4" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>[url]         : 連結。</li>
<li>[text]        : 按鈕文字。</li>
<li>[icon]        : [可選] 使用 <a href="https://fontawesome.com">Font Awesome 5</a> 圖標。</li>
<li>[color]       : [可選] 按鈕背景的顔色或 style 為 outline 時按鈕字體和邊框的顔色。<pre><code>default/blue/pink/red/purple/orange/green</code></pre></li>
<li>[style]       : [可選] 按鈕樣式，默認實心。<pre><code>outline/留空</code></pre></li>
<li>[layout]      : [可選] 按鈕佈局，默認 line。<pre><code>block/留空</code></pre></li>
<li>[position]    : [可選] layout 為 block 時的按鈕位置，默認左邊。<pre><code>center/right/留空</code></pre></li>
<li>[size]        : [可選] 按鈕大小<pre><code>larger/留空</code></pre></li>
</ul>
</br>

<h2 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h2><h3 id="Inline-2"><a href="#Inline-2" class="headerlink" title="Inline"></a>Inline</h3><p>Go to my blog, click the button <a class="btn-beautify button--animated " href="https://george16886.github.io" 
  title="george16886's blog"><span>george16886's blog</span></a><br>Go to my GitHub, click the button <a class="btn-beautify button--animated outline" href="https://george16886.github.io" 
  title="george16886"><i class="fas fa-globe-asia fa-fw"></i><span>george16886</span></a></p>
<h3 id="Different-Alignment"><a href="#Different-Alignment" class="headerlink" title="Different Alignment"></a>Different Alignment</h3><a class="btn-beautify button--animated block blue larger" href="https://george16886.github.io" 
  title="george16886"><i class="fas fa-globe-africa fa-fw"></i><span>george16886</span></a>
<a class="btn-beautify button--animated block center green larger" href="https://george16886.github.io" 
  title="george16886"><i class="fas fa-globe-europe fa-fw"></i><span>george16886</span></a>
<a class="btn-beautify button--animated block right outline orange larger" href="https://george16886.github.io" 
  title="george16886"><i class="fas fa-globe-americas fa-fw"></i><span>george16886</span></a>

<h3 id="Multiple-Buttons"><a href="#Multiple-Buttons" class="headerlink" title="Multiple Buttons"></a>Multiple Buttons</h3><a class="btn-beautify button--animated larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated blue larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated pink larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated red larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated purple larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated orange larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>
<a class="btn-beautify button--animated green larger" href="https://github.com/george16886" 
  title="GitHub"><i class="fab fa-github fa-fw"></i><span>GitHub</span></a>

<h3 id="Multiple-Buttons-aligned-canter"><a href="#Multiple-Buttons-aligned-canter" class="headerlink" title="Multiple Buttons (aligned canter)"></a>Multiple Buttons (aligned canter)</h3><div class="btn-center">
<a class="btn-beautify button--animated outline larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline blue larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline pink larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline red larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline purple larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline orange larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
<a class="btn-beautify button--animated outline green larger" href="https://github.com/george16886" 
  title="Github"><i class="fab fa-github fa-fw"></i><span>Github</span></a>
</div>

</br>

<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/技術隨筆/"><strong>Notes 技術隨筆</strong></a></li>
<li><a href="https://george16886.github.io/hexo-tag-plugins/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>技術隨筆</category>
        <category>HEXO</category>
        <category>Cheatsheet</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>Plugins</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Notes || 語法整理</title>
    <url>/markdown-notes/</url>
    <content><![CDATA[<blockquote>
<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</p>
</blockquote>
<ul>
<li>Check <a href="https://daringfireball.net/projects/markdown/">Official website</a> for original John Gruber markup.</li>
</ul>
</br>    

<hr>
<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Title</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Title</span><br><span class="line">=</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Title</span><br><span class="line">====</span><br></pre></td></tr></table></figure>

<h2 id="Sub-title"><a href="#Sub-title" class="headerlink" title="Sub-title"></a>Sub-title</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## Sub-title</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Sub-title</span><br><span class="line">-</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Sub-title</span><br><span class="line">--------</span><br></pre></td></tr></table></figure>

<h3 id="Sub-sub-title"><a href="#Sub-sub-title" class="headerlink" title="Sub-sub-title"></a>Sub-sub-title</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### Sub-sub-title</span></span><br></pre></td></tr></table></figure>

<h4 id="Sub-sub-sub-title"><a href="#Sub-sub-sub-title" class="headerlink" title="Sub-sub-sub-title"></a>Sub-sub-sub-title</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#### Sub-sub-sub-title</span></span><br></pre></td></tr></table></figure>

<h5 id="Sub-sub-sub-sub-title"><a href="#Sub-sub-sub-sub-title" class="headerlink" title="Sub-sub-sub-sub-title"></a>Sub-sub-sub-sub-title</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">##### Sub-sub-sub-sub-title</span></span><br></pre></td></tr></table></figure>

<h6 id="Sub-sub-sub-sub-sub-title"><a href="#Sub-sub-sub-sub-sub-title" class="headerlink" title="Sub-sub-sub-sub-sub-title"></a>Sub-sub-sub-sub-sub-title</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">###### Sub-sub-sub-sub-sub-title</span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li><h3 id="Title-would-be-set-as-URL-use-any-text-Title-to-jump-to-another-title-in-the-same-page"><a href="#Title-would-be-set-as-URL-use-any-text-Title-to-jump-to-another-title-in-the-same-page" class="headerlink" title="Title would be set as URL, use [any text](#Title) to jump to another title in the same page."></a>Title would be set as URL, use <strong><code>[any text](#Title)</code></strong> to jump to <a href="#Link">another title</a> in the same page.</h3><ul>
<li>Space in a title would be replaced with <code>-</code>, go to <a href="#Inline-HTML">Inline HTML</a>.</li>
<li>Title duplicated with the same content would be indexed with number, go to <a href="#Notes-2">table notes</a>.</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> ### Title would be set as URL, use <span class="strong">**`[<span class="string">any text</span>](<span class="link">#Title</span>)`**</span> to jump to [<span class="string">another title</span>](<span class="link">#Link</span>) in the same page.</span><br><span class="line"><span class="bullet">  *</span> #### Space in a title would be replaced with <span class="code">`-`</span>, go to [<span class="string">Inline HTML</span>](<span class="link">#Inline-HTML</span>).</span><br><span class="line"><span class="bullet">  *</span> #### Title duplicated with the same content would be indexed with number, go to [<span class="string">table notes</span>](<span class="link">#Notes-2</span>).</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="Title-is-available-in-a-list-or-blockquote"><a href="#Title-is-available-in-a-list-or-blockquote" class="headerlink" title="Title is available in a list or blockquote."></a>Title is available in a <a href="#List">list</a> or <a href="#Blockquote">blockquote</a>.</h3><blockquote>
<ul>
<li><h4 id="Only-sub-title-is-available-in-a-blockquote-see-blockquote-notes"><a href="#Only-sub-title-is-available-in-a-blockquote-see-blockquote-notes" class="headerlink" title="Only sub-title is available in a blockquote, see blockquote notes."></a>Only sub-title is available in a blockquote, see <a href="#Notes-4">blockquote notes</a>.</h4></li>
</ul>
</blockquote>
</li>
<li><h3 id="Add-before-to-show-if-is-at-the-end-of-a-title-like"><a href="#Add-before-to-show-if-is-at-the-end-of-a-title-like" class="headerlink" title="Add \ before # to show # if # is at the end of a title like #"></a>Add <code>\</code> before <code>#</code> to show # if <code>#</code> is at the end of a title like #</h3></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> ### Title is available in a [<span class="string">list</span>](<span class="link">#List</span>) or [<span class="string">blockquote</span>](<span class="link">#Blockquote</span>). #</span><br><span class="line"><span class="quote">&gt; <span class="emphasis">* #### Only sub-title is available in a blockquote, see [<span class="string">blockquote notes</span>](<span class="link">#Notes-4</span>). #</span></span></span><br><span class="line"><span class="quote"><span class="emphasis">*</span> ### Add `\` before `#` to show # if `#` is at the end of a title like \# </span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Highlighting"><a href="#Highlighting" class="headerlink" title="Highlighting"></a>Highlighting</h1><p><em>italic</em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*italic*</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">_italic_</span></span><br></pre></td></tr></table></figure>

<p><strong>bold</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**bold**</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">__bold__</span></span><br></pre></td></tr></table></figure>

<p><del>strikethrough</del></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">~~strikethrough~~</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>strikethrough<span class="xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Examples-with-some-combinations"><a href="#Examples-with-some-combinations" class="headerlink" title="Examples with some combinations"></a>Examples with some combinations</h2><p><em><strong>bold and italic</strong></em><br><code>***bold and italic***</code> or <code>___bold and italic___</code> or<br><code>_**bold and italic**_</code> or <code>*__bold and italic__*</code> or<br><code>__*bold and italic*__</code> or <code>**_bold and italic_**</code> </p>
<p><strong><em><del>bold and italic and strikethrough</del></em></strong><br><code>~~___bold and italic and strikethrough___~~</code> or<br><code>__*~~bold and italic and strikethrough~~*__</code> or<br><code>***~~bold and italic and strikethrough~~***</code> </p>
<p><em>italic</em>, <strong>bold, <em>bold and italic</em>, <del>bold and strikethrough</del></strong><br><code>_italic_, __bold, *bold and italic*, ~~bold and strikethrough~~__</code> </p>
</br>

<hr>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="Unordered-list"><a href="#Unordered-list" class="headerlink" title="Unordered list"></a>Unordered list</h2><ul>
<li>Use <strong><code>*</code></strong> (or <strong><code>+</code></strong> or <strong><code>-</code></strong>) for bullets.<ul>
<li>Use <strong>tab</strong> (<em>two spaces</em>) to make a sub-item.</li>
<li>Sub-item<ul>
<li>Sub-sub-item<ul>
<li>Sub-sub-sub-item</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>New list</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> Use <span class="strong">__`<span class="emphasis">*`<span class="strong">__ (or __</span>`+`<span class="strong">__ or __</span>`-`<span class="strong">__) for bullets.</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">  + Use *<span class="emphasis">*tab<span class="strong">** (<span class="emphasis">*two spaces*</span>) to make a sub-item.</span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">  + Sub-item</span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">    - Sub-sub-item</span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">      - Sub-sub-sub-item</span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">* New list</span></span></span></span></span></span></span><br></pre></td></tr></table></figure>

<h2 id="Ordered-list-sorting-sequence"><a href="#Ordered-list-sorting-sequence" class="headerlink" title="Ordered list (sorting sequence)"></a>Ordered list (sorting sequence)</h2><ol>
<li><p>Use <strong><code>#.</code></strong> for numbering. (<strong><code>#</code></strong> = integer)</p>
<ol start="5">
<li>Any number can be used to start an ordered list.</li>
<li>Number of succeeding item is assigned automatically.</li>
<li>Regardless of what number is set even duplicate numbers.<ol start="0">
<li>Sub-sub-item with # = 0</li>
<li><strong><em>Fail</em></strong> to create a <strong>sub-sub-sub-item</strong> with # = 3.</li>
</ol>
</li>
</ol>
</li>
<li><p>Succeeding item in the same ordered list with # = 0</p>
<ol start="0">
<li>Sub-item by ordered list with # = 0</li>
</ol>
<ul>
<li>Insert an unordered list inside an ordered list.</li>
</ul>
<ol start="0">
<li>Sub-item by ordered list with # = 0</li>
</ol>
</li>
<li><p>Inserting only one blank line results in the same ordered list.</p>
</li>
</ol>
<ul>
<li>Create a new unordered list to start a new ordered list numbering.<ol start="7">
<li>New ordered list created with # = 7</li>
</ol>
</li>
</ul>
<ol start="8">
<li>Create a new ordered list with # = 8 by inserting two blank lines.</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Use <span class="strong">**`#.`**</span> for numbering. (<span class="strong">**`#`**</span> = integer)</span><br><span class="line"><span class="bullet">  5.</span> Any number can be used to start an ordered list.</span><br><span class="line"><span class="bullet">  5.</span> Number of succeeding item is assigned automatically.</span><br><span class="line"><span class="bullet">  5.</span> Regardless of what number is set even duplicate numbers.</span><br><span class="line"><span class="bullet">    0.</span> Sub-sub-item with # = 0</span><br><span class="line"><span class="bullet">      3.</span> <span class="strong">**<span class="emphasis">*Fail<span class="strong">**<span class="emphasis">* to create a <span class="strong">**sub-sub-sub-item**</span> with # = 3.</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">0. Succeeding item in the same ordered list with # = 0</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  0. Sub-item by ordered list with # = 0</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  *</span> Insert an unordered list inside an ordered list.</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">  0. Sub-item by ordered list with # = 0</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">8. Inserting only one blank line results in the same ordered list.</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">* Create a new unordered list to start a new ordered list numbering.</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">  7. New ordered list created with # = 7</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">8. Create a new ordered list with # = 8 by inserting two blank lines.</span></span></span></span></span><br></pre></td></tr></table></figure>

<h2 id="Mixed-list"><a href="#Mixed-list" class="headerlink" title="Mixed list"></a>Mixed list</h2><ol start="0">
<li>Item with # = 0<ul>
<li>Sub-item</li>
</ul>
<ol start="8">
<li>Sub-item with # = 8</li>
<li><strong><em>No</em> sub-sub-item</strong> with # = 0</li>
</ol>
<ul>
<li>No sub-sub-item</li>
</ul>
</li>
</ol>
<ul>
<li>Item<ul>
<li>Sub-item</li>
</ul>
<ol start="0">
<li>Sub-item with # = 0</li>
</ol>
<ul>
<li><strong><em>No</em> sub-sub-item</strong>   </li>
</ul>
<ol start="7">
<li><strong><em>No</em> sub-sub-item</strong> with # = 7</li>
<li><strong><em>No</em> sub-sub-item</strong> with # = 7</li>
</ol>
</li>
</ul>
<p>Number of succeeding item in ordered list is still assigned automatically.</p>
</br>

<h2 id="Notes-1"><a href="#Notes-1" class="headerlink" title="Notes"></a>Notes</h2><h3 id="List-following-text-can-only-be-created-as"><a href="#List-following-text-can-only-be-created-as" class="headerlink" title="List following text can only be created as"></a>List following text can only be created as</h3><h4 id="Unordered-list-1"><a href="#Unordered-list-1" class="headerlink" title="Unordered list"></a>Unordered list</h4><p>Text</p>
<ul>
<li>Unordered list created.<ul>
<li>Sub-item</li>
</ul>
</li>
</ul>
<h4 id="Ordered-list-with-1"><a href="#Ordered-list-with-1" class="headerlink" title="Ordered list with # = 1"></a>Ordered list with <strong><code>#</code></strong> = 1</h4><p>Text<br>0. Failed to create list with # = 0.<br>  7. Sub-item with # = 7<br>3. Failed to create list with # = 3.<br>  7. Sub-item with # = 7</p>
<ol>
<li>Ordered list created with # = 1.<ol start="7">
<li>Sub-item with # = 7</li>
</ol>
</li>
</ol>
<h4 id="Or-you-can-insert-one-blank-line-before-creating-a-list"><a href="#Or-you-can-insert-one-blank-line-before-creating-a-list" class="headerlink" title="Or you can insert one blank line before creating a list."></a>Or you can insert one blank line before creating a list.</h4><ol start="0">
<li><strong>Ordered list created <em>with # = 0</em></strong>.<ol start="7">
<li>Sub-item with # = 7 </li>
</ol>
</li>
</ol>
<h3 id="If-you-want-to-use-without-creating-a-list-add-a-before"><a href="#If-you-want-to-use-without-creating-a-list-add-a-before" class="headerlink" title="If you want to use - without creating a list, add a \ before -."></a>If you want to use <strong>-</strong> without creating a list, add a <strong><code>\</code></strong> before <strong><code>-</code></strong>.</h3><ul>
<li>Here is a list created with <strong><code>-</code></strong>.</li>
</ul>
<p>- No list created.</p>
</br>

<hr>
<h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><table>
<thead>
<tr>
<th><em>Ich</em></th>
<th align="center">komme aus</th>
<th align="right"><strong><em>Taiwan</em></strong></th>
</tr>
</thead>
<tbody><tr>
<td>col 1 is</td>
<td align="center">left-aligned</td>
<td align="right"><em>italic</em></td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right"><strong>bold</strong></td>
</tr>
<tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right"><code>code</code></td>
</tr>
<tr>
<td>left</td>
<td align="center">center</td>
<td align="right">right</td>
</tr>
</tbody></table>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| <span class="emphasis">*Ich*</span>        | komme aus      | <span class="strong">**<span class="emphasis">*Taiwan<span class="strong">**<span class="emphasis">* |</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">| ------------ |:--------------:| ------------:|</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">| col 1 is     | left-aligned   | *</span>italic<span class="emphasis">*     |</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">| col 2 is     | centered       | <span class="strong">**bold**</span>     |</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">| col 3 is     | right-aligned  | `code`       |</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">| left         | center         | right        |</span></span></span></span></span><br></pre></td></tr></table></figure>

<p>More concise writing.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*Ich*</span> | komme aus | <span class="strong">**<span class="emphasis">*Taiwan<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">- | :-: | -:</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">col 1 is | left-aligned | *</span>italic<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">col 2 is | centered | <span class="strong">**bold**</span></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">col 3 is | right-aligned | `code`</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">left | center | right</span></span></span></span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-2"><a href="#Notes-2" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>The first row is always centered.</li>
<li>Colon ( <strong>:</strong> ) is used for alignment.<ul>
<li>Left <strong><code>:-</code></strong> to align left. (<em>default</em>)</li>
<li>Right <strong><code>-:</code></strong> to align right.</li>
<li>Both <strong><code>:-:</code></strong> to align center.</li>
</ul>
</li>
<li>The outermost vertical bar ( <strong>|</strong> ) is not absolutely necessary.</li>
</ul>
</br>

<hr>
<h1 id="New-Line"><a href="#New-Line" class="headerlink" title="New Line"></a>New Line</h1><p>Line1<br>Hit &lt;<strong>Enter</strong>&gt; for a new line.<br>Or append <strong><code>&lt;/br&gt;</code></strong> at the end of line.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line1</span><br><span class="line">Hit <span class="xml"><span class="tag">&lt;<span class="name">**Enter**</span>&gt;</span></span> for a new line.</span><br><span class="line">Or append <span class="strong">**`<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span>`**</span> at the end of line.</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Line1 <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span> Hit <span class="xml"><span class="tag">&lt;<span class="name">**Enter**</span>&gt;</span></span> for a new line. <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span> Or append <span class="strong">**`<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span>`**</span> at the end of line.</span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="New-Paragraph"><a href="#New-Paragraph" class="headerlink" title="New Paragraph"></a>New Paragraph</h1><p>Paragraph1</p>
<p>Hit &lt;<strong>Enter</strong>&gt; twice for a new paragraph.<br>New line</p>
<p>Or add a new line after appending <strong><code>&lt;/br&gt;</code></strong> at the end of line.<br>New line</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Paragraph1</span><br><span class="line"></span><br><span class="line">Hit <span class="xml"><span class="tag">&lt;<span class="name">**Enter**</span>&gt;</span></span> twice for a new paragraph.</span><br><span class="line">New line</span><br><span class="line"></span><br><span class="line">Or add a new line after appending <span class="strong">**`<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span>`**</span> at the end of line.</span><br><span class="line">New line</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Paragraph1 <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line">Hit <span class="xml"><span class="tag">&lt;<span class="name">**Enter**</span>&gt;</span></span> twice for a new paragraph. <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span> New line <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line">Or add a new line after appending <span class="strong">**`<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span>`**</span> at the end of line. <span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span> New line</span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-3"><a href="#Notes-3" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Force more than one blank line by using <strong><code>&lt;/br&gt;</code></strong></li>
</ul>
</br>

<p>New paragraph<br>New line</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> Force more than one blank line by using <span class="strong">**`<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span>`**</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">New paragraph</span><br><span class="line">New line</span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h1><hr>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Blockquote"><a href="#Blockquote" class="headerlink" title="Blockquote"></a>Blockquote</h1><blockquote>
<p>Here is a blockquote.<br>- george16886</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Here is a blockquote.</span></span><br><span class="line"><span class="quote">&gt; \- george16886</span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-4"><a href="#Notes-4" class="headerlink" title="Notes"></a>Notes</h2><blockquote>
<p>Once using the symbol <strong><code>&gt;</code></strong>, you can continuously do writing and the whole paragraph would be in this blockquote.<br>Even if you make a new line without <strong><code>&gt;</code></strong>.<br>Inline Markdown language is available in the blockquote, such as <em>italic</em>, <strong>bold</strong>, <code>inline code</code>, etc.</p>
</blockquote>
<h3 id="However-if-you-are-creating-a-sub-title-list-or-horizontal-rule-there-must-be-gt-in-the-front-of-the-line"><a href="#However-if-you-are-creating-a-sub-title-list-or-horizontal-rule-there-must-be-gt-in-the-front-of-the-line" class="headerlink" title="However, if you are creating a sub-title, list or horizontal rule, there must be &gt; in the front of the line."></a>However, if you are creating a <strong><em>sub-title</em></strong>, <strong><em>list</em></strong> or <strong><em>horizontal rule</em></strong>, there must be <strong><code>&gt;</code></strong> in the front of the line.</h3><ol start="0">
<li>Title (<em>largest</em>) is not allowed in a blockquote.<blockquote>
<ol start="0">
<li><h3 id="Blockquote-can-also-be-inside-a-list"><a href="#Blockquote-can-also-be-inside-a-list" class="headerlink" title="Blockquote can also be inside a list."></a>Blockquote can also be inside a list.</h3><ol start="0">
<li>Sub-sub-item  </li>
</ol>
</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<h3 id="To-start-a-new-blockquote-insert-one-blank-line"><a href="#To-start-a-new-blockquote-insert-one-blank-line" class="headerlink" title="To start a new blockquote, insert one blank line."></a>To start a new blockquote, insert one blank line.</h3><blockquote>
<h3 id="To-make-a-blockquote-inside-a-blockquote-use-double-gt"><a href="#To-make-a-blockquote-inside-a-blockquote-use-double-gt" class="headerlink" title="To make a blockquote inside a blockquote, use double &gt;."></a>To make a blockquote inside a blockquote, use double <strong><code>&gt;</code></strong>.</h3><p>Once you are in a layer-2 blockquote, you can’t use a layer-1 blockquote.</p>
</blockquote>
<ul>
<li>Unless you are using a list.<ul>
<li>Sub-item </li>
</ul>
</li>
</ul>
<hr>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<h3 id="You-can-also-start-a-layer-n-blockquote-directly-by-using-n-gt"><a href="#You-can-also-start-a-layer-n-blockquote-directly-by-using-n-gt" class="headerlink" title="You can also start a layer-n blockquote directly by using n &gt;."></a>You can also start a layer-<strong><em>n</em></strong> blockquote directly by using <strong><em>n</em></strong> <strong><code>&gt;</code></strong>.</h3><blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<ul>
<li>Layer-9 blockquote</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</br>

<hr>
<h1 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h1><pre><code>Here is a block.
Don&apos;t worry, be happy!
Be YOURSFLF!</code></pre><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- Add four spaces in the fornt of each line --&gt;</span></span></span><br><span class="line"><span class="code">    Here is a block.</span></span><br><span class="line"><span class="code">    Don&#x27;t worry, be happy!</span></span><br><span class="line"><span class="code">    Be YOURSFLF!</span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p><code>int a = 0;</code> </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`int a = 0;`</span> </span><br></pre></td></tr></table></figure>

<p><code>int `a` = 0;</code> </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``int `</span>a<span class="code">` = 0;`</span>` </span><br></pre></td></tr></table></figure>

<h2 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;JavaScript syntax highlighting&quot;</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``` Javascript </span></span><br><span class="line"><span class="code">var s = &quot;JavaScript syntax highlighting&quot;;</span></span><br><span class="line"><span class="code">alert(s);</span></span><br><span class="line"><span class="code">``` </span></span><br></pre></td></tr></table></figure>

<h2 id="Code-block-with-file-name"><a href="#Code-block-with-file-name" class="headerlink" title="Code block with file name"></a>Code block with file name</h2><figure class="highlight python"><figcaption><span>demo.py</span></figcaption><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Python syntax highlighting&quot;</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">``` Python demo.py</span></span><br><span class="line"><span class="code">s = &quot;Python syntax highlighting&quot;</span></span><br><span class="line"><span class="code">print s</span></span><br><span class="line"><span class="code">```  </span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-5"><a href="#Notes-5" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Use <strong><code>`</code></strong> <em><code>inline code</code></em> <strong><code>`</code></strong> for inline code.<ul>
<li>If you want to use <strong><code>`</code></strong> inside code, use two <strong><code>`</code></strong> for inline code instead of one.</li>
</ul>
</li>
<li>Use <strong><code>```</code></strong> <em><code>(language)</code></em> + <em>(new line) <code>code block</code></em> + <em>(new line)</em> <strong><code>```</code></strong> for code clock.<ul>
<li>Specify programming language after the starting <strong><code>```</code></strong>.<ul>
<li>If no language indicated, no syntax highlighting. And the title of the code block would be <strong>“Code”</strong>.</li>
</ul>
</li>
<li>Do not leave space after the ending <strong><code>```</code></strong>.</li>
</ul>
</li>
</ul>
</br>

<hr>
<h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><h2 id="Direct-link"><a href="#Direct-link" class="headerlink" title="Direct link"></a>Direct link</h2><h3 id="https-george16886-github-io"><a href="#https-george16886-github-io" class="headerlink" title="https://george16886.github.io"></a><a href="https://george16886.github.io">https://george16886.github.io</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### https://george16886.github.io</span></span><br></pre></td></tr></table></figure>

<h3 id="URL-link"><a href="#URL-link" class="headerlink" title="URL link"></a><a href="https://george16886.github.io">URL link</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">URL link</span>](<span class="link">https://george16886.github.io</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="URL-link-with-title-mouseover-text"><a href="#URL-link-with-title-mouseover-text" class="headerlink" title="URL link with title (mouseover text)"></a><a href="https://george16886.github.io" title="george16886&#39;s blog">URL link with title (mouseover text)</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">URL link with title (mouseover text)</span>](<span class="link">https://george16886.github.io &quot;george16886&#x27;s blog&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="Relative-path-link"><a href="#Relative-path-link" class="headerlink" title="Relative path link"></a><a href="../../../../link">Relative path link</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">Relative path link</span>](<span class="link">../../../../link</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><h3 id="Reference-link-1"><a href="#Reference-link-1" class="headerlink" title="Reference link"></a><a href="https://george16886.github.io">Reference link</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">Reference link</span>][<span class="symbol">george16886&#x27;s blog</span>]</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">george16886&#x27;s blog</span>]: <span class="link">https://george16886.github.io</span></span><br></pre></td></tr></table></figure>

<h3 id="Reference-link-using"><a href="#Reference-link-using" class="headerlink" title="Reference link using #"></a><a href="https://george16886.github.io">Reference link using <code>#</code></a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">Reference link using `#`</span>][<span class="symbol">1</span>]</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">https://george16886.github.io</span></span><br></pre></td></tr></table></figure>

<h3 id="Reference-link-using-with-title-mouseover-text"><a href="#Reference-link-using-with-title-mouseover-text" class="headerlink" title="Reference link using # with title (mouseover text)"></a><a href="https://george16886.github.io" title="george16886&#39;s blog">Reference link using <code>#</code> with title (mouseover text)</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [<span class="string">Reference link using `#` with title (mouseover text)</span>][<span class="symbol">2</span>]</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">2</span>]: <span class="link">https://george16886.github.io &quot;george16886&#x27;s blog&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Direct-reference-link"><a href="#Direct-reference-link" class="headerlink" title="Direct reference link"></a><a href="https://george16886.github.io">Direct reference link</a></h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### [Direct reference link]</span></span><br><span class="line"></span><br><span class="line">[<span class="symbol">Direct reference link</span>]: <span class="link">https://george16886.github.io</span></span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-6"><a href="#Notes-6" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Link and reference should be separated with a blank line.</li>
</ul>
</br>

<hr>
<h1 id="Embedded-Image"><a href="#Embedded-Image" class="headerlink" title="Embedded Image"></a>Embedded Image</h1><h2 id="Direct-link-1"><a href="#Direct-link-1" class="headerlink" title="Direct link"></a>Direct link</h2><h3 id="URL-link-with-title-mouseover-text-1"><a href="#URL-link-with-title-mouseover-text-1" class="headerlink" title="URL link with title (mouseover text)"></a>URL link with title (mouseover text)</h3><p><img src="https://bit.ly/3aVcEJV" alt="image_tag" title="pika cute"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image_tag</span>](<span class="link">https://bit.ly/3aVcEJV &quot;pika cute&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Relative-path-link-1"><a href="#Relative-path-link-1" class="headerlink" title="Relative path link"></a>Relative path link</h3><p><img src="/uploads/images/friend_404.gif" alt="image_tag" title="404 ghost"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image_tag</span>](<span class="link">/uploads/images/friend_404.gif &quot;404 ghost&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference-link-2"><a href="#Reference-link-2" class="headerlink" title="Reference link"></a>Reference link</h2><h3 id="Reference-link-with-title-mouseover-text"><a href="#Reference-link-with-title-mouseover-text" class="headerlink" title="Reference link with title (mouseover text)"></a>Reference link with title (mouseover text)</h3><p><img src="https://bit.ly/2xceXtv" alt="image_tag" title="pika ball"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image_tag</span>][<span class="symbol">logo</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">https://bit.ly/2xceXtv &quot;pika ball&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Reference-link-using-1"><a href="#Reference-link-using-1" class="headerlink" title="Reference link using #"></a>Reference link using <code>#</code></h3><p><img src="https://bit.ly/3aVcEJV" alt="image_tag"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">image_tag</span>][<span class="symbol">9</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">9</span>]: <span class="link">https://bit.ly/3aVcEJV</span></span><br></pre></td></tr></table></figure>

<h2 id="Image-with-hyperlink"><a href="#Image-with-hyperlink" class="headerlink" title="Image with hyperlink"></a>Image with hyperlink</h2><p><a href="https://medium.com/%E5%BE%B7%E5%9C%8B%E9%AC%BC%E7%9A%84180%E5%A4%A9%E9%A4%8A%E6%88%90%E8%A8%88%E7%95%AB"><img src="/uploads/images/travel.gif" alt="alt text" title="德國鬼的180天交換計畫"></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">![alt text</span>](<span class="link">/uploads/images/travel.gif &quot;德國鬼的180天交換計畫&quot;</span>)](<span class="link">https://medium.com/%E5%BE%B7%E5%9C%8B%E9%AC%BC%E7%9A%84180%E5%A4%A9%E9%A4%8A%E6%88%90%E8%A8%88%E7%95%AB</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Resize-image"><a href="#Resize-image" class="headerlink" title="Resize image"></a>Resize image</h2><h3 id="Resize-using-HTML"><a href="#Resize-using-HTML" class="headerlink" title="Resize using HTML"></a>Resize using HTML</h3><p><img src="https://bit.ly/3aVcEJV" 
alt="image_tag" title="pika cute" width="320" height="240"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bit.ly/3aVcEJV&quot;</span> </span></span></span><br><span class="line"><span class="xml">alt=&quot;image_tag&quot; title=&quot;pika cute&quot; width=&quot;320&quot; height=&quot;240&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Resize-using-HEXO-tag-plugins"><a href="#Resize-using-HEXO-tag-plugins" class="headerlink" title="Resize using HEXO tag plugins"></a>Resize using <a href="https://george16886.github.io/hexo-tag-plugins/">HEXO tag plugins</a></h3><img src="https://bit.ly/2xceXtv" class="[class names]" width="320" height="240" title="pika ball" alt="alt text"> 
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] https://bit.ly/2xceXtv 320 240 &#x27;&quot;pika ball&quot; &quot;alt text&quot;&#x27; %&#125; </span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-7"><a href="#Notes-7" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Adapt the method of <a href="#Link">link</a>.</li>
<li>Animated GIF is supported.</li>
</ul>
</br>

<hr>
<h1 id="Embedded-Youtube-Video"><a href="#Embedded-Youtube-Video" class="headerlink" title="Embedded Youtube Video"></a>Embedded Youtube Video</h1><h2 id="Direct-link-2"><a href="#Direct-link-2" class="headerlink" title="Direct link"></a>Direct link</h2><p><a href="https://www.youtube.com/watch?v=xRZAHBs8OQI"><img src="https://bit.ly/2woblUN" alt="image_tag"></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">![image_tag</span>](<span class="link">https://bit.ly/2woblUN</span>)](<span class="link">https://www.youtube.com/watch?v=xRZAHBs8OQI</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Resize-using-HTML-1"><a href="#Resize-using-HTML-1" class="headerlink" title="Resize using HTML"></a>Resize using HTML</h2><p><a href="https://www.youtube.com/watch?feature=player_embedded&v=xRZAHBs8OQI
" target="_blank"><img src="https://bit.ly/2woblUN" 
alt="image_tag" width="320" height="240" border="10" /></a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.youtube.com/watch?feature=player_embedded&amp;v=xRZAHBs8OQI</span></span></span></span><br><span class="line"><span class="xml">&quot; target=&quot;_blank&quot;&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bit.ly/2woblUN&quot;</span> </span></span></span><br><span class="line"><span class="xml">alt=&quot;image_tag&quot; width=&quot;320&quot; height=&quot;240&quot; border=&quot;10&quot; &gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="HEXO-tag-plugins"><a href="#HEXO-tag-plugins" class="headerlink" title="HEXO tag plugins"></a><a href="https://george16886.github.io/hexo-tag-plugins/">HEXO tag plugins</a></h3><div class="video-container"><iframe src="https://www.youtube.com/embed/xRZAHBs8OQI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% youtube xRZAHBs8OQI %&#125;</span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-8"><a href="#Notes-8" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li>Adapt the method of <a href="#Embedded-Image">embedded image</a>.</li>
<li>Replace the youtube video ID.</li>
</ul>
</br>

<hr>
<h1 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h1><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><dl>
  <dt> Definition list </dt>
  <dd> Is something people use sometimes. </dd>

  <dt> Markdown in HTML </dt>
  <dd> Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
</dl>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span> Definition list <span class="xml"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span> Is something people use sometimes. <span class="xml"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span> Markdown in HTML <span class="xml"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span> Does <span class="emphasis">*not*</span> work <span class="strong">**very**</span> well. Use HTML <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>tags<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>.<span class="xml"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h2><ol>
  <li> Bird </li>
  <li> McHale </li>
  <li> Parish </li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span> Bird <span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span> McHale <span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span> Parish <span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Text-Alignment"><a href="#Text-Alignment" class="headerlink" title="Text Alignment"></a>Text Alignment</h1><center> Centered </center>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span> Centered <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p align = "left"> Aligned left </p>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span> = <span class="string">&quot;left&quot;</span>&gt;</span></span> Aligned left <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p align = "right"> Aligned right </p>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span> = <span class="string">&quot;right&quot;</span>&gt;</span></span> Aligned right <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</br>

<hr>
<h1 id="Font-Color"><a href="#Font-Color" class="headerlink" title="Font Color"></a>Font Color</h1><p>​<br><font color = green> Green </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">green</span>&gt;</span></span> Green <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font color = red> Red </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">red</span>&gt;</span></span> Red <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font color = blue> Blue </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">blue</span>&gt;</span></span> Blue <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>​<br></br>    </p>
<hr>
<p>​</p>
<h1 id="Font-Size"><a href="#Font-Size" class="headerlink" title="Font Size"></a>Font Size</h1><p>​<br><font size = "3"> Font size = 3 </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span>&gt;</span></span> Font size = 3 <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font size ="6"> Font size = 6 </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> =<span class="string">&quot;6&quot;</span>&gt;</span></span> Font size = 6 <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>​​<br></br>    </p>
<hr>
<h1 id="Font-Face"><a href="#Font-Face" class="headerlink" title="Font Face"></a>Font Face</h1><p>​<br><font face = "Arial Black"> Arial Black </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span> = <span class="string">&quot;Arial Black&quot;</span>&gt;</span></span> Arial Black <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font face = "Calibri"> Calibri </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span> = <span class="string">&quot;Calibri&quot;</span>&gt;</span></span> Calibri <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><font face = "Droid Sans Mono"> Droid Sans Mono </font></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span> = <span class="string">&quot;Droid Sans Mono&quot;</span>&gt;</span></span> Droid Sans Mono <span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</br>    

<hr>
<h1 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h1><p>Standard HTML tags</p>
<!-- comment -->

<!-- mutli-line
comment -->

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- comment --&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- mutli-line</span></span></span><br><span class="line"><span class="xml">comment --&gt;</span></span><br></pre></td></tr></table></figure>

</br>    

<hr>
<!-- # New line for a paragraph

Here's a line for us to start with.


This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but... 
This line is only separated by a single newline, so it's a separate line in the *same paragraph*.

</br>    

---

# Footnotes

Text prior to footnote reference.[^2]
[^2] Comment to include in footnote.

Text prior to footnote reference.^[3]
[3]^ Comment to include in footnote.

</br>

--- -->

<h1 id="GitHub-Flavored-Markdown"><a href="#GitHub-Flavored-Markdown" class="headerlink" title="GitHub Flavored Markdown"></a>GitHub Flavored Markdown</h1><h2 id="Task-list"><a href="#Task-list" class="headerlink" title="Task list"></a>Task list</h2><ol start="0">
<li><input checked="" disabled="" type="checkbox"> This is a complete item.</li>
<li><input disabled="" type="checkbox"> This is an incomplete item.<ul>
<li><input disabled="" type="checkbox"> This is an incomplete sub-item.</li>
<li><input checked="" disabled="" type="checkbox"> This is a complete sub-item</li>
</ul>
</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">0.</span> [x] This is a complete item.</span><br><span class="line"><span class="bullet">0.</span> [ ] This is an incomplete item.</span><br><span class="line"><span class="bullet">  *</span> [ ] This is an incomplete sub-item.</span><br><span class="line"><span class="bullet">  *</span> [x] This is a complete sub-item</span><br></pre></td></tr></table></figure>

</br>

<h2 id="Notes-9"><a href="#Notes-9" class="headerlink" title="Notes"></a>Notes</h2><ul>
<li><em><a href="https://george16886.github.io/">Links</a></em>, <strong>formatting</strong>, <strong><em>tags</em></strong>, @mentions, and #refs, are supported.</li>
<li>List syntax is required.</li>
</ul>
</br>    

<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/技術隨筆/"><strong>Notes 技術隨筆</strong></a></li>
<li><a href="https://george16886.github.io/markdown-notes/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>技術隨筆</category>
        <category>Cheatsheet</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Cheatsheet</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>HEXO</category>
        <category>Cheatsheet</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me || 【閱讀激發思考，寫作捕捉思路】</title>
    <url>/about-me/</url>
    <content><![CDATA[<p>也跟風新人打卡一下。</p>
<p>名詞解釋：<br>就幾、工程師、牡羊座</p>
<p>動詞解釋：<br>籃球、健身、追劇、旅遊</p>
<p>形容詞的部分就讓各位看官們自行感受了～</p>
<p>前陣子因為想建立一個自己的部落格，因緣際會下接觸到了 Matters，深深地對裡面多元的內容感到興趣，可謂琳瑯滿目、面面俱到。不少創作，不管長篇短篇，都讓人讀之津津有味；又或是一些經驗、一些分享、各種議題以及各種不同形式的創作，都在大家的筆下妙筆生花、栩栩如生。</p>
<p>不禁激起了我對創作，曾經的渴望。</p>
<p>回想起就學時期，雖算不上有什麼藝術天分，但喜愛繪畫；文學造詣雖稱不上順口成章，但在作業考試之餘，總愛自己嚷嚷，在想像中寫作。<br>後來因為選擇了自然組，便與創作更加地漸行漸遠。</p>
<p>出來工作後，做了工程師，更少自己動筆了，只在閒暇之餘，看看一些設計、欣賞自由創作。</p>
<p>這次建立部落格的過程中，看到了一句很喜歡的話：【閱讀激發思考，寫作捕捉思路】。又受到 Matters 的啟發，讓原本想寫一個技術部落格的我，萌生出一個想法：</p>
<p>『何不什麼都寫一些呢？』<br>『想到什麼就寫什麼吧！』</p>
<p>期許不久的將來，在動詞解釋中，會多出一項被我遺忘已久的感動：</p>
<p>創作。</p>
<hr>
<p>花了不少時間和心力建立且美化了我的部落格；<br>歡迎大家閒暇時蒞臨⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️<br>我的部落格：<a href="https://george16886.github.io">https://george16886.github.io</a></p>
<hr>
<blockquote>
<ul>
<li><em>Category</em>: <a href="https://george16886.github.io/categories/Notes/生活隨筆/"><strong>Notes 生活隨筆</strong></a></li>
<li><a href="https://george16886.github.io/about-me/"><strong><em>Original post</em></strong></a> @<a href="https://george16886.github.io"><strong>george16886’s blog</strong></a></li>
</ul>
</blockquote>
<center><div style='height: 230px; max-width: 485px;'>
  <script type="text/javascript">
    document.write(
      "<iframe scrolling='no' frameborder='0' sandbox='allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-storage-access-by-user-activation' style='height: 230px; width: 100%;' src='https://button.like.co/in/embed/george16886/button?referrer=" +
      encodeURIComponent(location.href.split("?")[0].split("#")[0]) + "'></iframe>");
  </script>
<div></center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>生活隨筆</category>
      </categories>
      <tags>
        <tag>Matters</tag>
        <tag>About</tag>
      </tags>
  </entry>
</search>
